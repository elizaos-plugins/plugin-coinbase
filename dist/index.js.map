{"version":3,"sources":["../src/plugins/massPayments.ts","../src/types.ts","../src/templates.ts","../src/utils.ts","../src/plugins/commerce.ts","../src/plugins/trade.ts","../src/plugins/tokenContract.ts","../src/constants.ts","../src/plugins/webhooks.ts","../advanced-sdk-ts/src/jwt-generator.ts","../advanced-sdk-ts/src/constants.ts","../advanced-sdk-ts/src/rest/rest-base.ts","../advanced-sdk-ts/src/rest/errors.ts","../advanced-sdk-ts/src/rest/accounts.ts","../advanced-sdk-ts/src/rest/converts.ts","../advanced-sdk-ts/src/rest/dataAPI.ts","../advanced-sdk-ts/src/rest/fees.ts","../advanced-sdk-ts/src/rest/futures.ts","../advanced-sdk-ts/src/rest/orders.ts","../advanced-sdk-ts/src/rest/payments.ts","../advanced-sdk-ts/src/rest/perpetuals.ts","../advanced-sdk-ts/src/rest/portfolios.ts","../advanced-sdk-ts/src/rest/products.ts","../advanced-sdk-ts/src/rest/public.ts","../advanced-sdk-ts/src/rest/index.ts","../src/plugins/advancedTrade.ts","../src/index.ts"],"sourcesContent":["import { Coinbase, type Wallet } from \"@coinbase/coinbase-sdk\";\nimport {\n    composeContext,\n    elizaLogger,\n    generateObject,\n    ModelClass,\n    type Action,\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n    type HandlerCallback,\n    type Plugin,\n} from \"@elizaos/core\";\nimport {\n    TransferSchema,\n    isTransferContent,\n    type TransferContent,\n    type Transaction,\n} from \"../types\";\nimport { transferTemplate } from \"../templates\";\nimport { readFile } from \"fs/promises\";\nimport { parse } from \"csv-parse/sync\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport fs from \"fs\";\nimport { createArrayCsvWriter } from \"csv-writer\";\nimport {\n    appendTransactionsToCsv,\n    executeTransfer,\n    getCharityAddress,\n    getWalletDetails,\n    initializeWallet,\n} from \"../utils\";\n\n// Dynamically resolve the file path to the src/plugins directory\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\nconst csvFilePath = path.join(baseDir, \"transactions.csv\");\n\nexport const massPayoutProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Starting massPayoutProvider.get function\");\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n            elizaLogger.info(\"Reading CSV file from:\", csvFilePath);\n\n            // Ensure the CSV file exists\n            if (!fs.existsSync(csvFilePath)) {\n                elizaLogger.warn(\"CSV file not found. Creating a new one.\");\n                const csvWriter = createArrayCsvWriter({\n                    path: csvFilePath,\n                    header: [\n                        \"Address\",\n                        \"Amount\",\n                        \"Status\",\n                        \"Error Code\",\n                        \"Transaction URL\",\n                    ],\n                });\n                await csvWriter.writeRecords([]); // Create an empty file with headers\n                elizaLogger.info(\"New CSV file created with headers.\");\n            }\n\n            // Read and parse the CSV file\n            const csvData = await readFile(csvFilePath, \"utf-8\");\n            const records = parse(csvData, {\n                columns: true,\n                skip_empty_lines: true,\n            });\n\n            const { balances, transactions } = await getWalletDetails(runtime);\n\n            elizaLogger.info(\"Parsed CSV records:\", records);\n            elizaLogger.info(\"Current Balances:\", balances);\n            elizaLogger.info(\"Last Transactions:\", transactions);\n\n            return {\n                currentTransactions: records.map((record: any) => ({\n                    address: record[\"Address\"] || undefined,\n                    amount: Number.parseFloat(record[\"Amount\"]) || undefined,\n                    status: record[\"Status\"] || undefined,\n                    errorCode: record[\"Error Code\"] || \"\",\n                    transactionUrl: record[\"Transaction URL\"] || \"\",\n                })),\n                balances,\n                transactionHistory: transactions,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in massPayoutProvider:\", error);\n            return { csvRecords: [], balances: [], transactions: [] };\n        }\n    },\n};\n\nasync function executeMassPayout(\n    runtime: IAgentRuntime,\n    networkId: string,\n    receivingAddresses: string[],\n    transferAmount: number,\n    assetId: string\n): Promise<Transaction[]> {\n    elizaLogger.debug(\"Starting executeMassPayout function\");\n    const transactions: Transaction[] = [];\n    const assetIdLowercase = assetId.toLowerCase();\n    let sendingWallet: Wallet;\n    try {\n        elizaLogger.debug(\"Initializing sending wallet\");\n        sendingWallet = await initializeWallet(runtime, networkId);\n    } catch (error) {\n        elizaLogger.error(\"Error initializing sending wallet:\", error);\n        throw error;\n    }\n    for (const address of receivingAddresses) {\n        elizaLogger.info(\"Processing payout for address:\", address);\n        if (address) {\n            try {\n                // Check balance before initiating transfer\n\n                const walletBalance =\n                    await sendingWallet.getBalance(assetIdLowercase);\n\n                elizaLogger.info(\"Wallet balance for asset:\", {\n                    assetId,\n                    walletBalance,\n                });\n\n                if (walletBalance.lessThan(transferAmount)) {\n                    const insufficientFunds = `Insufficient funds for address ${sendingWallet.getDefaultAddress()} to send to ${address}. Required: ${transferAmount}, Available: ${walletBalance}`;\n                    elizaLogger.error(insufficientFunds);\n\n                    transactions.push({\n                        address,\n                        amount: transferAmount,\n                        status: \"Failed\",\n                        errorCode: insufficientFunds,\n                        transactionUrl: null,\n                    });\n                    continue;\n                }\n\n                // Execute the transfer\n                const transfer = await executeTransfer(\n                    sendingWallet,\n                    transferAmount,\n                    assetIdLowercase,\n                    address\n                );\n\n                transactions.push({\n                    address,\n                    amount: transfer.getAmount().toNumber(),\n                    status: \"Success\",\n                    errorCode: null,\n                    transactionUrl: transfer.getTransactionLink(),\n                });\n            } catch (error) {\n                elizaLogger.error(\n                    \"Error during transfer for address:\",\n                    address,\n                    error\n                );\n                transactions.push({\n                    address,\n                    amount: transferAmount,\n                    status: \"Failed\",\n                    errorCode: error?.code || \"Unknown Error\",\n                    transactionUrl: null,\n                });\n            }\n        } else {\n            elizaLogger.info(\"Skipping invalid or empty address.\");\n            transactions.push({\n                address: \"Invalid or Empty\",\n                amount: transferAmount,\n                status: \"Failed\",\n                errorCode: \"Invalid Address\",\n                transactionUrl: null,\n            });\n        }\n    }\n    // Send 1% to charity\n    const charityAddress = getCharityAddress(networkId);\n\n    try {\n        elizaLogger.debug(\"Sending 1% to charity:\", charityAddress);\n        const charityTransfer = await executeTransfer(\n            sendingWallet,\n            transferAmount * 0.01,\n            assetId,\n            charityAddress\n        );\n\n        transactions.push({\n            address: charityAddress,\n            amount: charityTransfer.getAmount().toNumber(),\n            status: \"Success\",\n            errorCode: null,\n            transactionUrl: charityTransfer.getTransactionLink(),\n        });\n    } catch (error) {\n        elizaLogger.error(\"Error during charity transfer:\", error);\n        transactions.push({\n            address: charityAddress,\n            amount: transferAmount * 0.01,\n            status: \"Failed\",\n            errorCode: error?.message || \"Unknown Error\",\n            transactionUrl: null,\n        });\n    }\n    await appendTransactionsToCsv(transactions);\n    elizaLogger.info(\"Finished processing mass payouts.\");\n    return transactions;\n}\n\n// Action for sending mass payouts\nexport const sendMassPayoutAction: Action = {\n    name: \"SEND_MASS_PAYOUT\",\n    similes: [\"BULK_TRANSFER\", \"DISTRIBUTE_FUNDS\", \"SEND_PAYMENTS\"],\n    description:\n        \"Sends mass payouts to a list of receiving addresses using a predefined sending wallet and logs all transactions to a CSV file.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime and message...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting SEND_MASS_PAYOUT handler...\");\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n            if (!state) {\n                state = (await runtime.composeState(message, {\n                    providers: [massPayoutProvider],\n                })) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state,\n                template: transferTemplate,\n            });\n\n            const transferDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.LARGE,\n                schema: TransferSchema,\n            });\n\n            elizaLogger.info(\n                \"Transfer details generated:\",\n                transferDetails.object\n            );\n\n            if (!isTransferContent(transferDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid transfer details. Please check the inputs.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const { receivingAddresses, transferAmount, assetId, network } =\n                transferDetails.object as TransferContent;\n\n            const allowedNetworks = Object.values(Coinbase.networks);\n\n            if (\n                !network ||\n                !allowedNetworks.includes(network.toLowerCase() as any) ||\n                !receivingAddresses?.length ||\n                transferAmount <= 0 ||\n                !assetId\n            ) {\n                elizaLogger.error(\"Missing or invalid input parameters:\", {\n                    network,\n                    receivingAddresses,\n                    transferAmount,\n                    assetId,\n                });\n                callback(\n                    {\n                        text: `Invalid input parameters. Please ensure:\n- Network is one of: ${allowedNetworks.join(\", \")}.\n- Receiving addresses are provided.\n- Transfer amount is greater than zero.\n- Asset ID is valid.`,\n                    },\n                    []\n                );\n                return;\n            }\n\n            elizaLogger.info(\"◎ Starting mass payout...\");\n            const transactions = await executeMassPayout(\n                runtime,\n                network,\n                receivingAddresses,\n                transferAmount,\n                assetId\n            );\n\n            const successTransactions = transactions.filter(\n                (tx) => tx.status === \"Success\"\n            );\n            const failedTransactions = transactions.filter(\n                (tx) => tx.status === \"Failed\"\n            );\n            const successDetails = successTransactions\n                .map(\n                    (tx) =>\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Transaction URL: ${\n                            tx.transactionUrl || \"N/A\"\n                        }`\n                )\n                .join(\"\\n\");\n            const failedDetails = failedTransactions\n                .map(\n                    (tx) =>\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Error Code: ${\n                            tx.errorCode || \"Unknown Error\"\n                        }`\n                )\n                .join(\"\\n\");\n            const charityTransactions = transactions.filter(\n                (tx) => tx.address === getCharityAddress(network)\n            );\n            const charityDetails = charityTransactions\n                .map(\n                    (tx) =>\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Transaction URL: ${\n                            tx.transactionUrl || \"N/A\"\n                        }`\n                )\n                .join(\"\\n\");\n            callback(\n                {\n                    text: `Mass payouts completed successfully.\n- Successful Transactions: ${successTransactions.length}\n- Failed Transactions: ${failedTransactions.length}\n\nDetails:\n${successTransactions.length > 0 ? `✅ Successful Transactions:\\n${successDetails}` : \"No successful transactions.\"}\n${failedTransactions.length > 0 ? `❌ Failed Transactions:\\n${failedDetails}` : \"No failed transactions.\"}\n${charityTransactions.length > 0 ? `✅ Charity Transactions:\\n${charityDetails}` : \"No charity transactions.\"}\n\nCheck the CSV file for full details.`,\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error during mass payouts:\", error);\n            callback(\n                { text: \"Failed to complete payouts. Please try again.\" },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Distribute 0.0001 ETH on base to 0xA0ba2ACB5846A54834173fB0DD9444F756810f06 and 0xF14F2c49aa90BaFA223EE074C1C33b59891826bF\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Mass payouts completed successfully.\n- Successful Transactions: {{2}}\n- Failed Transactions: {{1}}\n\nDetails:\n✅ Successful Transactions:\nAddress: 0xABC123..., Amount: 0.005, Transaction URL: https://etherscan.io/tx/...\nAddress: 0xDEF456..., Amount: 0.005, Transaction URL: https://etherscan.io/tx/...\n\n❌ Failed Transactions:\nAddress: 0xGHI789..., Amount: 0.005, Error Code: Insufficient Funds\n\nCheck the CSV file for full details.`,\n                    action: \"SEND_MASS_PAYOUT\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Airdrop 10 USDC to these community members: 0x789..., 0x101... on base network\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Mass payout completed successfully:\\n- Airdropped 10 USDC to 2 addresses on base network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Multi-send 0.25 ETH to team wallets: 0x222..., 0x333... on Ethereum\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Mass payout completed successfully:\\n- Multi-sent 0.25 ETH to 2 addresses on Ethereum network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Distribute rewards of 5 SOL each to contest winners: winner1.sol, winner2.sol on Solana\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Mass payout completed successfully:\\n- Distributed 5 SOL to 2 addresses on Solana network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\n                },\n            },\n        ],\n    ],\n};\n\nexport const coinbaseMassPaymentsPlugin: Plugin = {\n    name: \"automatedPayments\",\n    description:\n        \"Processes mass payouts using Coinbase SDK and logs all transactions (success and failure) to a CSV file. Provides dynamic transaction data through a provider.\",\n    actions: [sendMassPayoutAction],\n    providers: [massPayoutProvider],\n};\n\n","import { Coinbase } from \"@coinbase/coinbase-sdk\";\nimport { z } from \"zod\";\nimport {\n    WebhookEventType,\n    type WebhookEventFilter,\n    type WebhookEventTypeFilter,\n} from \"@coinbase/coinbase-sdk/dist/client\";\n\nexport const ChargeSchema = z.object({\n    id: z.string().nullable(),\n    price: z.number(),\n    type: z.string(),\n    currency: z.string().min(3).max(3),\n    name: z.string().min(1),\n    description: z.string().min(1),\n});\n\nexport interface ChargeContent {\n    id: string | null;\n    price: number;\n    type: string;\n    currency: string; // Currency code (e.g., USD)\n    name: string; // Name of the charge\n    description: string; // Description of the charge\n}\n\nexport const isChargeContent = (object: any): object is ChargeContent => {\n    if (ChargeSchema.safeParse(object).success) {\n        return true;\n    }\n    console.error(\"Invalid content: \", object);\n    return false;\n};\n\nexport const TransferSchema = z.object({\n    network: z.string().toLowerCase(),\n    receivingAddresses: z.array(z.string()),\n    transferAmount: z.number(),\n    assetId: z.string().toLowerCase(),\n});\n\nexport interface TransferContent {\n    network: string;\n    receivingAddresses: string[];\n    transferAmount: number;\n    assetId: string;\n}\n\nexport const isTransferContent = (object: any): object is TransferContent => {\n    return TransferSchema.safeParse(object).success;\n};\n\nexport type Transaction = {\n    address: string;\n    amount: number;\n    status: string;\n    errorCode: string | null;\n    transactionUrl: string | null;\n};\nconst assetValues = Object.values(Coinbase.assets) as [string, ...string[]];\nexport const TradeSchema = z.object({\n    network: z.string().toLowerCase(),\n    amount: z.number(),\n    sourceAsset: z.enum(assetValues),\n    targetAsset: z.enum(assetValues),\n    side: z.enum([\"BUY\", \"SELL\"]),\n});\n\nexport interface TradeContent {\n    network: string;\n    amount: number;\n    sourceAsset: string;\n    targetAsset: string;\n    side: \"BUY\" | \"SELL\";\n}\n\nexport const isTradeContent = (object: any): object is TradeContent => {\n    return TradeSchema.safeParse(object).success;\n};\n\nexport type TradeTransaction = {\n    network: string;\n    amount: number;\n    sourceAsset: string;\n    targetAsset: string;\n    status: string;\n    errorCode: string | null;\n    transactionUrl: string | null;\n};\n\nexport interface TokenContractContent {\n    contractType: \"ERC20\" | \"ERC721\" | \"ERC1155\";\n    name: string;\n    symbol: string;\n    network: string;\n    baseURI?: string;\n    totalSupply?: number;\n}\n\nexport const TokenContractSchema = z\n    .object({\n        contractType: z\n            .enum([\"ERC20\", \"ERC721\", \"ERC1155\"])\n            .describe(\"The type of token contract to deploy\"),\n        name: z.string().describe(\"The name of the token\"),\n        symbol: z.string().describe(\"The symbol of the token\"),\n        network: z.string().describe(\"The blockchain network to deploy on\"),\n        baseURI: z\n            .string()\n            .optional()\n            .describe(\n                \"The base URI for token metadata (required for ERC721 and ERC1155)\"\n            ),\n        totalSupply: z\n            .number()\n            .optional()\n            .describe(\"The total supply of tokens (only for ERC20)\"),\n    })\n    .refine(\n        (data) => {\n            if (data.contractType === \"ERC20\") {\n                return (\n                    typeof data.totalSupply === \"number\" ||\n                    data.totalSupply === undefined\n                );\n            }\n            if ([\"ERC721\", \"ERC1155\"].includes(data.contractType)) {\n                return (\n                    typeof data.baseURI === \"string\" ||\n                    data.baseURI === undefined\n                );\n            }\n            return true;\n        },\n        {\n            message: \"Invalid token contract content\",\n            path: [\"contractType\"],\n        }\n    );\n\nexport const isTokenContractContent = (\n    obj: any\n): obj is TokenContractContent => {\n    return TokenContractSchema.safeParse(obj).success;\n};\n\n// Add to types.ts\nexport interface ContractInvocationContent {\n    contractAddress: string;\n    method: string;\n    abi: any[];\n    args?: Record<string, any>;\n    amount?: string;\n    assetId: string;\n    networkId: string;\n}\n\nexport const ContractInvocationSchema = z.object({\n    contractAddress: z\n        .string()\n        .describe(\"The address of the contract to invoke\"),\n    method: z.string().describe(\"The method to invoke on the contract\"),\n    abi: z.array(z.any()).describe(\"The ABI of the contract\"),\n    args: z\n        .record(z.string(), z.any())\n        .optional()\n        .describe(\"The arguments to pass to the contract method\"),\n    amount: z\n        .string()\n        .optional()\n        .describe(\n            \"The amount of the asset to send (as string to handle large numbers)\"\n        ),\n    assetId: z.string().describe(\"The ID of the asset to send (e.g., 'USDC')\"),\n    networkId: z\n        .string()\n        .describe(\"The network ID to use (e.g., 'ethereum-mainnet')\"),\n});\n\nexport const isContractInvocationContent = (\n    obj: any\n): obj is ContractInvocationContent => {\n    return ContractInvocationSchema.safeParse(obj).success;\n};\n\nexport const WebhookSchema = z.object({\n    networkId: z.string(),\n    eventType: z.nativeEnum(WebhookEventType),\n    eventTypeFilter: z.custom<WebhookEventTypeFilter>().optional(),\n    eventFilters: z.array(z.custom<WebhookEventFilter>()).optional(),\n});\n\nexport type WebhookContent = z.infer<typeof WebhookSchema>;\n\nexport const isWebhookContent = (object: any): object is WebhookContent => {\n    return WebhookSchema.safeParse(object).success;\n};\n\nexport const AdvancedTradeSchema = z.object({\n    productId: z.string(),\n    side: z.enum([\"BUY\", \"SELL\"]),\n    amount: z.number(),\n    orderType: z.enum([\"MARKET\", \"LIMIT\"]),\n    limitPrice: z.number().optional(),\n});\n\nexport interface AdvancedTradeContent {\n    productId: string;\n    side: \"BUY\" | \"SELL\";\n    amount: number;\n    orderType: \"MARKET\" | \"LIMIT\";\n    limitPrice?: number;\n}\n\nexport const isAdvancedTradeContent = (\n    object: any\n): object is AdvancedTradeContent => {\n    return AdvancedTradeSchema.safeParse(object).success;\n};\n\nexport interface ReadContractContent {\n    contractAddress: `0x${string}`;\n    method: string;\n    networkId: string;\n    args: Record<string, any>;\n    abi?: any[];\n}\n\nexport const ReadContractSchema = z.object({\n    contractAddress: z\n        .string()\n        .describe(\"The address of the contract to read from\"),\n    method: z.string().describe(\"The view/pure method to call on the contract\"),\n    networkId: z.string().describe(\"The network ID to use\"),\n    args: z\n        .record(z.string(), z.any())\n        .describe(\"The arguments to pass to the contract method\"),\n    abi: z.array(z.any()).optional().describe(\"The contract ABI (optional)\"),\n});\n\nexport const isReadContractContent = (obj: any): obj is ReadContractContent => {\n    return ReadContractSchema.safeParse(obj).success;\n};\n","export const chargeTemplate = `\nExtract the following details to create a Coinbase charge:\n- **price** (number): The amount for the charge (e.g., 100.00).\n- **currency** (string): The 3-letter ISO 4217 currency code (e.g., USD, EUR).\n- **type** (string): The pricing type for the charge (e.g., fixed_price, dynamic_price). Assume price type is fixed unless otherwise stated\n- **name** (string): A non-empty name for the charge (e.g., \"The Human Fund\").\n- **description** (string): A non-empty description of the charge (e.g., \"Money For People\").\n\nProvide the values in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"price\": <number>,\n    \"currency\": \"<currency>\",\n    \"type\": \"<type>\",\n    \"name\": \"<name>\",\n    \"description\": \"<description>\"\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const getChargeTemplate = `\nExtract the details for a Coinbase charge using the provided charge ID:\n- **charge_id** (string): The unique identifier of the charge (e.g., \"2b364ef7-ad60-4fcd-958b-e550a3c47dc6\").\n\nProvide the charge details in the following JSON format after retrieving the charge details:\n\n\\`\\`\\`json\n{\n    \"charge_id\": \"<charge_id>\",\n    \"price\": <number>,\n    \"currency\": \"<currency>\",\n    \"type\": \"<type>\",\n    \"name\": \"<name>\",\n    \"description\": \"<description>\",\n    \"status\": \"<status>\",\n    \"created_at\": \"<ISO8601 timestamp>\",\n    \"expires_at\": \"<ISO8601 timestamp>\"\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const transferTemplate = `\nExtract the following details for processing a mass payout using the Coinbase SDK:\n- **receivingAddresses** (array): A list of wallet addresses receiving the funds.\n- **transferAmount** (number): The amount to transfer to each address.\n- **assetId** (string): The asset ID to transfer (e.g., ETH, BTC).\n- **network** (string): The blockchain network to use. Allowed values are:\n    static networks: {\n        readonly BaseSepolia: \"base-sepolia\";\n        readonly BaseMainnet: \"base-mainnet\";\n        readonly EthereumHolesky: \"ethereum-holesky\";\n        readonly EthereumMainnet: \"ethereum-mainnet\";\n        readonly PolygonMainnet: \"polygon-mainnet\";\n        readonly SolanaDevnet: \"solana-devnet\";\n        readonly SolanaMainnet: \"solana-mainnet\";\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\n    };\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"receivingAddresses\": [\"<receiving_address_1>\", \"<receiving_address_2>\"],\n    \"transferAmount\": <amount>,\n    \"assetId\": \"<asset_id>\",\n    \"network\": \"<network>\"\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const tradeTemplate = `\nExtract the following details for processing a trade using the Coinbase SDK:\n- **network** (string): The blockchain network to use (e.g., base, sol, eth, arb, pol).\n- **amount** (number): The amount to trade.\n- **sourceAsset** (string): The asset ID to trade from (must be one of: ETH, SOL, USDC, WETH, GWEI, LAMPORT).\n- **targetAsset** (string): The asset ID to trade to (must be one of: ETH, SOL, USDC, WETH, GWEI, LAMPORT).\n- **side** (string): The side of the trade (must be either \"BUY\" or \"SELL\").\n\nEnsure that:\n1. **network** is one of the supported networks: \"base\", \"sol\", \"eth\", \"arb\", or \"pol\".\n2. **sourceAsset** and **targetAsset** are valid assets from the provided list.\n3. **amount** is a positive number.\n4. **side** is either \"BUY\" or \"SELL\".\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"network\": \"<network>\",\n    \"amount\": <amount>,\n    \"sourceAsset\": \"<source_asset_id>\",\n    \"targetAsset\": \"<target_asset_id>\",\n    \"side\": \"<side>\"\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const advancedTradeTemplate = `\nExtract the following details for processing an advanced trade using the Coinbase Advanced Trading API:\n- **productId** (string): The trading pair ID (e.g., \"BTC-USD\", \"ETH-USD\", \"SOL-USD\")\n- **side** (string): The side of the trade (must be either \"BUY\" or \"SELL\")\n- **amount** (number): The amount to trade\n- **orderType** (string): The type of order (must be either \"MARKET\" or \"LIMIT\")\n- **limitPrice** (number, optional): The limit price for limit orders\n\nEnsure that:\n1. **productId** follows the format \"ASSET-USD\" (e.g., \"BTC-USD\")\n2. **side** is either \"BUY\" or \"SELL\"\n3. **amount** is a positive number\n4. **orderType** is either \"MARKET\" or \"LIMIT\"\n5. **limitPrice** is provided when orderType is \"LIMIT\"\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"productId\": \"<product_id>\",\n    \"side\": \"<side>\",\n    \"amount\": <amount>,\n    \"orderType\": \"<order_type>\",\n    \"limitPrice\": <limit_price>\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const tokenContractTemplate = `\nExtract the following details for deploying a token contract using the Coinbase SDK:\n- **contractType** (string): The type of token contract to deploy (ERC20, ERC721, or ERC1155)\n- **name** (string): The name of the token\n- **symbol** (string): The symbol of the token\n- **network** (string): The blockchain network to deploy on (e.g., base, eth, arb, pol)\n- **baseURI** (string, optional): The base URI for token metadata (required for ERC721 and ERC1155)\n- **totalSupply** (number, optional): The total supply of tokens (only for ERC20)\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"contractType\": \"<contract_type>\",\n    \"name\": \"<token_name>\",\n    \"symbol\": \"<token_symbol>\",\n    \"network\": \"<network>\",\n    \"baseURI\": \"<base_uri>\",\n    \"totalSupply\": <total_supply>\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\n// Add to templates.ts\nexport const contractInvocationTemplate = `\nExtract the following details for invoking a smart contract using the Coinbase SDK:\n- **contractAddress** (string): The address of the contract to invoke\n- **method** (string): The method to invoke on the contract\n- **abi** (array): The ABI of the contract\n- **args** (object, optional): The arguments to pass to the contract method\n- **amount** (string, optional): The amount of the asset to send (as string to handle large numbers)\n- **assetId** (string, required): The ID of the asset to send (e.g., 'USDC')\n- **networkId** (string, required): The network ID to use in format \"chain-network\".\n static networks: {\n        readonly BaseSepolia: \"base-sepolia\";\n        readonly BaseMainnet: \"base-mainnet\";\n        readonly EthereumHolesky: \"ethereum-holesky\";\n        readonly EthereumMainnet: \"ethereum-mainnet\";\n        readonly PolygonMainnet: \"polygon-mainnet\";\n        readonly SolanaDevnet: \"solana-devnet\";\n        readonly SolanaMainnet: \"solana-mainnet\";\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\n    };\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"contractAddress\": \"<contract_address>\",\n    \"method\": \"<method_name>\",\n    \"abi\": [<contract_abi>],\n    \"args\": {\n        \"<arg_name>\": \"<arg_value>\"\n    },\n    \"amount\": \"<amount_as_string>\",\n    \"assetId\": \"<asset_id>\",\n    \"networkId\": \"<network_id>\"\n}\n\\`\\`\\`\n\nExample for invoking a transfer method on the USDC contract:\n\n\\`\\`\\`json\n{\n    \"contractAddress\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    \"method\": \"transfer\",\n    \"abi\": [\n        {\n            \"constant\": false,\n            \"inputs\": [\n                {\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"name\": \"amount\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"transfer\",\n            \"outputs\": [\n                {\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        }\n    ],\n    \"args\": {\n        \"to\": \"0xbcF7C64B880FA89a015970dC104E848d485f99A3\",\n        \"amount\": \"1000000\" // 1 USDC (6 decimals)\n    },\n    \"networkId\": \"ethereum-mainnet\",\n    \"assetId\": \"USDC\"\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const webhookTemplate = `\nExtract the following details for creating a webhook:\n- **networkId** (string): The network ID for which the webhook is created.\nAllowed values are:\n    static networks: {\n        readonly BaseSepolia: \"base-sepolia\";\n        readonly BaseMainnet: \"base-mainnet\";\n        readonly EthereumHolesky: \"ethereum-holesky\";\n        readonly EthereumMainnet: \"ethereum-mainnet\";\n        readonly PolygonMainnet: \"polygon-mainnet\";\n        readonly SolanaDevnet: \"solana-devnet\";\n        readonly SolanaMainnet: \"solana-mainnet\";\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\n    };\n- **eventType** (string): The type of event for the webhook.\nexport declare const WebhookEventType: {\n    readonly Unspecified: \"unspecified\";\n    readonly Erc20Transfer: \"erc20_transfer\";\n    readonly Erc721Transfer: \"erc721_transfer\";\n    readonly WalletActivity: \"wallet_activity\";\n};\n- **eventTypeFilter** (string, optional): Filter for wallet activity event type.\nexport interface WebhookEventTypeFilter {\n    /**\n     * A list of wallet addresses to filter on.\n     * @type {Array<string>}\n     * @memberof WebhookWalletActivityFilter\n     */\n    'addresses'?: Array<string>;\n    /**\n     * The ID of the wallet that owns the webhook.\n     * @type {string}\n     * @memberof WebhookWalletActivityFilter\n     */\n    'wallet_id'?: string;\n}\n- **eventFilters** (array, optional): Filters applied to the events that determine which specific events trigger the webhook.\nexport interface Array<WebhookEventFilter> {\n    /**\n     * The onchain contract address of the token for which the events should be tracked.\n     * @type {string}\n     * @memberof WebhookEventFilter\n     */\n    'contract_address'?: string;\n    /**\n     * The onchain address of the sender. Set this filter to track all transfer events originating from your address.\n     * @type {string}\n     * @memberof WebhookEventFilter\n     */\n    'from_address'?: string;\n    /**\n     * The onchain address of the receiver. Set this filter to track all transfer events sent to your address.\n     * @type {string}\n     * @memberof WebhookEventFilter\n     */\n    'to_address'?: string;\n}\nProvide the details in the following JSON format:\n\\`\\`\\`json\n{\n    \"networkId\": \"<networkId>\",\n    \"eventType\": \"<eventType>\",\n    \"eventTypeFilter\": \"<eventTypeFilter>\",\n    \"eventFilters\": [<eventFilter1>, <eventFilter2>]\n}\n\\`\\`\\`\n\n\n\nExample for creating a webhook on the Sepolia testnet for ERC20 transfers originating from a specific wallet 0x1234567890123456789012345678901234567890 on transfers from 0xbcF7C64B880FA89a015970dC104E848d485f99A3\n\n\\`\\`\\`javascript\n\n    networkId: 'base-sepolia', // Listening on sepolia testnet transactions\n    eventType: 'erc20_transfer',\n    eventTypeFilter: {\n      addresses: ['0x1234567890123456789012345678901234567890']\n    },\n    eventFilters: [{\n      from_address: '0xbcF7C64B880FA89a015970dC104E848d485f99A3',\n    }],\n});\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n\nexport const readContractTemplate = `\nExtract the following details for reading from a smart contract using the Coinbase SDK:\n- **contractAddress** (string): The address of the contract to read from (must start with 0x)\n- **method** (string): The view/pure method to call on the contract\n- **networkId** (string): The network ID based on networks configured in Coinbase SDK\nAllowed values are:\n    static networks: {\n        readonly BaseSepolia: \"base-sepolia\";\n        readonly BaseMainnet: \"base-mainnet\";\n        readonly EthereumHolesky: \"ethereum-holesky\";\n        readonly EthereumMainnet: \"ethereum-mainnet\";\n        readonly PolygonMainnet: \"polygon-mainnet\";\n        readonly SolanaDevnet: \"solana-devnet\";\n        readonly SolanaMainnet: \"solana-mainnet\";\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\n    };\n- **args** (object): The arguments to pass to the contract method\n- **abi** (array, optional): The contract ABI if needed for complex interactions\n\nProvide the details in the following JSON format:\n\n\\`\\`\\`json\n{\n    \"contractAddress\": \"<0x-prefixed-address>\",\n    \"method\": \"<method_name>\",\n    \"networkId\": \"<network_id>\",\n    \"args\": {\n        \"<arg_name>\": \"<arg_value>\"\n    },\n    \"abi\": [\n        // Optional ABI array\n    ]\n}\n\\`\\`\\`\n\nExample for reading the balance of an ERC20 token:\n\n\\`\\`\\`json\n{\n    \"contractAddress\": \"0x37f2131ebbc8f97717edc3456879ef56b9f4b97b\",\n    \"method\": \"balanceOf\",\n    \"networkId\": \"eth-mainnet\",\n    \"args\": {\n        \"account\": \"0xbcF7C64B880FA89a015970dC104E848d485f99A3\"\n    }\n}\n\\`\\`\\`\n\nHere are the recent user messages for context:\n{{recentMessages}}\n`;\n","import {\n    Coinbase,\n    type Trade,\n    type Transfer,\n    Wallet,\n    type WalletData,\n    type Webhook,\n} from \"@coinbase/coinbase-sdk\";\nimport { elizaLogger, type IAgentRuntime, settings } from \"@elizaos/core\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport type { EthereumTransaction } from \"@coinbase/coinbase-sdk/dist/client\";\nimport { fileURLToPath } from \"url\";\nimport { createArrayCsvWriter } from \"csv-writer\";\nimport type { Transaction } from \"./types\";\n\n// Dynamically resolve the file path to the src/plugins directory\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\nconst tradeCsvFilePath = path.join(baseDir, \"trades.csv\");\nconst transactionCsvFilePath = path.join(baseDir, \"transactions.csv\");\nconst webhookCsvFilePath = path.join(baseDir, \"webhooks.csv\");\n\nexport async function initializeWallet(\n    runtime: IAgentRuntime,\n    networkId: string = Coinbase.networks.EthereumMainnet\n) {\n    let wallet: Wallet;\n    const storedSeed =\n        runtime.getSetting(\"COINBASE_GENERATED_WALLET_HEX_SEED\") ??\n        process.env.COINBASE_GENERATED_WALLET_HEX_SEED;\n\n    const storedWalletId =\n        runtime.getSetting(\"COINBASE_GENERATED_WALLET_ID\") ??\n        process.env.COINBASE_GENERATED_WALLET_ID;\n    if (!storedSeed || !storedWalletId) {\n        // No stored seed or wallet ID, creating a new wallet\n        wallet = await Wallet.create({ networkId });\n\n        // Export wallet data directly\n        const walletData: WalletData = wallet.export();\n        const walletAddress = await wallet.getDefaultAddress();\n        try {\n            const characterFilePath = `characters/${runtime.character.name.toLowerCase()}.character.json`;\n            const walletIDSave = await updateCharacterSecrets(\n                characterFilePath,\n                \"COINBASE_GENERATED_WALLET_ID\",\n                walletData.walletId\n            );\n            const seedSave = await updateCharacterSecrets(\n                characterFilePath,\n                \"COINBASE_GENERATED_WALLET_HEX_SEED\",\n                walletData.seed\n            );\n            if (walletIDSave && seedSave) {\n                elizaLogger.log(\"Successfully updated character secrets.\");\n            } else {\n                const seedFilePath = `characters/${runtime.character.name.toLowerCase()}-seed.txt`;\n                elizaLogger.error(\n                    `Failed to update character secrets so adding gitignored ${seedFilePath} file please add it your env or character file and delete:`\n                );\n                // save it to gitignored file\n                wallet.saveSeed(seedFilePath);\n            }\n            elizaLogger.log(\n                \"Wallet created and stored new wallet:\",\n                walletAddress\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error updating character secrets:\", error);\n            throw error;\n        }\n\n        // Logging wallet creation\n        elizaLogger.log(\"Created and stored new wallet:\", walletAddress);\n    } else {\n        // Importing existing wallet using stored seed and wallet ID\n        // Always defaults to base-mainnet we can't select the network here\n        wallet = await Wallet.import({\n            seed: storedSeed,\n            walletId: storedWalletId,\n        });\n        const networkId = wallet.getNetworkId();\n        elizaLogger.log(\"Imported existing wallet for network:\", networkId);\n\n        // Logging wallet import\n        elizaLogger.log(\n            \"Imported existing wallet:\",\n            await wallet.getDefaultAddress()\n        );\n    }\n\n    return wallet;\n}\n\n/**\n * Executes a trade and a charity transfer.\n * @param {IAgentRuntime} runtime - The runtime for wallet initialization.\n * @param {string} network - The network to use.\n * @param {number} amount - The amount to trade and transfer.\n * @param {string} sourceAsset - The source asset to trade.\n * @param {string} targetAsset - The target asset to trade.\n */\nexport async function executeTradeAndCharityTransfer(\n    runtime: IAgentRuntime,\n    network: string,\n    amount: number,\n    sourceAsset: string,\n    targetAsset: string\n) {\n    const wallet = await initializeWallet(runtime, network);\n\n    elizaLogger.log(\"Wallet initialized:\", {\n        network,\n        address: await wallet.getDefaultAddress(),\n    });\n\n    const charityAddress = getCharityAddress(network);\n    const charityAmount = charityAddress ? amount * 0.01 : 0;\n    const tradeAmount = charityAddress ? amount - charityAmount : amount;\n    const assetIdLowercase = sourceAsset.toLowerCase();\n    const tradeParams = {\n        amount: tradeAmount,\n        fromAssetId: assetIdLowercase,\n        toAssetId: targetAsset.toLowerCase(),\n    };\n\n    let transfer: Transfer;\n    if (charityAddress && charityAmount > 0) {\n        transfer = await executeTransfer(\n            wallet,\n            charityAmount,\n            assetIdLowercase,\n            charityAddress\n        );\n        elizaLogger.log(\"Charity Transfer successful:\", {\n            address: charityAddress,\n            transactionUrl: transfer.getTransactionLink(),\n        });\n        await appendTransactionsToCsv([\n            {\n                address: charityAddress,\n                amount: charityAmount,\n                status: \"Success\",\n                errorCode: null,\n                transactionUrl: transfer.getTransactionLink(),\n            },\n        ]);\n    }\n\n    const trade: Trade = await wallet.createTrade(tradeParams);\n    elizaLogger.log(\"Trade initiated:\", trade.toString());\n    await trade.wait();\n    elizaLogger.log(\"Trade completed successfully:\", trade.toString());\n    await appendTradeToCsv(trade);\n    return {\n        trade,\n        transfer,\n    };\n}\n\nexport async function appendTradeToCsv(trade: Trade) {\n    try {\n        const csvWriter = createArrayCsvWriter({\n            path: tradeCsvFilePath,\n            header: [\n                \"Network\",\n                \"From Amount\",\n                \"Source Asset\",\n                \"To Amount\",\n                \"Target Asset\",\n                \"Status\",\n                \"Transaction URL\",\n            ],\n            append: true,\n        });\n\n        const formattedTrade = [\n            trade.getNetworkId(),\n            trade.getFromAmount(),\n            trade.getFromAssetId(),\n            trade.getToAmount(),\n            trade.getToAssetId(),\n            trade.getStatus(),\n            trade.getTransaction().getTransactionLink() || \"\",\n        ];\n\n        elizaLogger.log(\"Writing trade to CSV:\", formattedTrade);\n        await csvWriter.writeRecords([formattedTrade]);\n        elizaLogger.log(\"Trade written to CSV successfully.\");\n    } catch (error) {\n        elizaLogger.error(\"Error writing trade to CSV:\", error);\n    }\n}\n\nexport async function appendTransactionsToCsv(transactions: Transaction[]) {\n    try {\n        const csvWriter = createArrayCsvWriter({\n            path: transactionCsvFilePath,\n            header: [\n                \"Address\",\n                \"Amount\",\n                \"Status\",\n                \"Error Code\",\n                \"Transaction URL\",\n            ],\n            append: true,\n        });\n\n        const formattedTransactions = transactions.map((transaction) => [\n            transaction.address,\n            transaction.amount.toString(),\n            transaction.status,\n            transaction.errorCode || \"\",\n            transaction.transactionUrl || \"\",\n        ]);\n\n        elizaLogger.log(\"Writing transactions to CSV:\", formattedTransactions);\n        await csvWriter.writeRecords(formattedTransactions);\n        elizaLogger.log(\"All transactions written to CSV successfully.\");\n    } catch (error) {\n        elizaLogger.error(\"Error writing transactions to CSV:\", error);\n    }\n}\n// create a function to append webhooks to a csv\nexport async function appendWebhooksToCsv(webhooks: Webhook[]) {\n    try {\n        // Ensure the CSV file exists\n        if (!fs.existsSync(webhookCsvFilePath)) {\n            elizaLogger.warn(\"CSV file not found. Creating a new one.\");\n            const csvWriter = createArrayCsvWriter({\n                path: webhookCsvFilePath,\n                header: [\n                    \"Webhook ID\",\n                    \"Network ID\",\n                    \"Event Type\",\n                    \"Event Filters\",\n                    \"Event Type Filter\",\n                    \"Notification URI\",\n                ],\n            });\n            await csvWriter.writeRecords([]); // Create an empty file with headers\n            elizaLogger.log(\"New CSV file created with headers.\");\n        }\n        const csvWriter = createArrayCsvWriter({\n            path: webhookCsvFilePath,\n            header: [\n                \"Webhook ID\",\n                \"Network ID\",\n                \"Event Type\",\n                \"Event Filters\",\n                \"Event Type Filter\",\n                \"Notification URI\",\n            ],\n            append: true,\n        });\n\n        const formattedWebhooks = webhooks.map((webhook) => [\n            webhook.getId(),\n            webhook.getNetworkId(),\n            webhook.getEventType(),\n            JSON.stringify(webhook.getEventFilters()),\n            JSON.stringify(webhook.getEventTypeFilter()),\n            webhook.getNotificationURI(),\n        ]);\n\n        elizaLogger.log(\"Writing webhooks to CSV:\", formattedWebhooks);\n        await csvWriter.writeRecords(formattedWebhooks);\n        elizaLogger.log(\"All webhooks written to CSV successfully.\");\n    } catch (error) {\n        elizaLogger.error(\"Error writing webhooks to CSV:\", error);\n    }\n}\n\n/**\n * Updates a key-value pair in character.settings.secrets.\n * @param {string} characterfilePath - The file path to the character.\n * @param {string} key - The secret key to update or add.\n * @param {string} value - The new value for the secret key.\n */\nexport async function updateCharacterSecrets(\n    characterfilePath: string,\n    key: string,\n    value: string\n): Promise<boolean> {\n    try {\n        const characterFilePath = path.resolve(\n            process.cwd(),\n            characterfilePath\n        );\n\n        // Check if the character file exists\n        if (!fs.existsSync(characterFilePath)) {\n            elizaLogger.error(\"Character file not found:\", characterFilePath);\n            return false;\n        }\n\n        // Read the existing character file\n        const characterData = JSON.parse(\n            fs.readFileSync(characterFilePath, \"utf-8\")\n        );\n\n        // Ensure settings and secrets exist in the character file\n        if (!characterData.settings) {\n            characterData.settings = {};\n        }\n        if (!characterData.settings.secrets) {\n            characterData.settings.secrets = {};\n        }\n\n        // Update or add the key-value pair\n        characterData.settings.secrets[key] = value;\n\n        // Write the updated data back to the file\n        fs.writeFileSync(\n            characterFilePath,\n            JSON.stringify(characterData, null, 2),\n            \"utf-8\"\n        );\n\n        console.log(\n            `Updated ${key} in character.settings.secrets for ${characterFilePath}.`\n        );\n    } catch (error) {\n        elizaLogger.error(\"Error updating character secrets:\", error);\n        return false;\n    }\n    return true;\n}\n\nexport const getAssetType = (transaction: EthereumTransaction) => {\n    // Check for ETH\n    if (transaction.value && transaction.value !== \"0\") {\n        return \"ETH\";\n    }\n\n    // Check for ERC-20 tokens\n    if (transaction.token_transfers && transaction.token_transfers.length > 0) {\n        return transaction.token_transfers\n            .map((transfer) => {\n                return transfer.token_id;\n            })\n            .join(\", \");\n    }\n\n    return \"N/A\";\n};\n\n/**\n * Fetches and formats wallet balances and recent transactions.\n *\n * @param {IAgentRuntime} runtime - The runtime for wallet initialization.\n * @param {string} networkId - The network ID (optional, defaults to ETH mainnet).\n * @returns {Promise<{balances: Array<{asset: string, amount: string}>, transactions: Array<any>}>} - An object with formatted balances and transactions.\n */\nexport async function getWalletDetails(\n    runtime: IAgentRuntime,\n    networkId: string = Coinbase.networks.EthereumMainnet\n): Promise<{\n    balances: Array<{ asset: string; amount: string }>;\n    transactions: Array<{\n        timestamp: string;\n        amount: string;\n        asset: string; // Ensure getAssetType is implemented\n        status: string;\n        transactionUrl: string;\n    }>;\n}> {\n    try {\n        // Initialize the wallet, defaulting to the specified network or ETH mainnet\n        const wallet = await initializeWallet(runtime, networkId);\n\n        // Fetch balances\n        const balances = await wallet.listBalances();\n        const formattedBalances = Array.from(balances, (balance) => ({\n            asset: balance[0],\n            amount: balance[1].toString(),\n        }));\n\n        // Fetch the wallet's recent transactions\n\n        const transactionsData = [];\n        const formattedTransactions = transactionsData.map((transaction) => {\n            const content = transaction.content();\n            return {\n                timestamp: content.block_timestamp || \"N/A\",\n                amount: content.value || \"N/A\",\n                asset: getAssetType(content) || \"N/A\", // Ensure getAssetType is implemented\n                status: transaction.getStatus(),\n                transactionUrl: transaction.getTransactionLink() || \"N/A\",\n            };\n        });\n\n        // Return formatted data\n        return {\n            balances: formattedBalances,\n            transactions: formattedTransactions,\n        };\n    } catch (error) {\n        console.error(\"Error fetching wallet details:\", error);\n        throw new Error(\"Unable to retrieve wallet details.\");\n    }\n}\n\n/**\n * Executes a transfer.\n * @param {Wallet} wallet - The wallet to use.\n * @param {number} amount - The amount to transfer.\n * @param {string} sourceAsset - The source asset to transfer.\n * @param {string} targetAddress - The target address to transfer to.\n */\nexport async function executeTransferAndCharityTransfer(\n    wallet: Wallet,\n    amount: number,\n    sourceAsset: string,\n    targetAddress: string,\n    network: string\n) {\n    const charityAddress = getCharityAddress(network);\n    const charityAmount = charityAddress ? amount * 0.01 : 0;\n    const transferAmount = charityAddress ? amount - charityAmount : amount;\n    const assetIdLowercase = sourceAsset.toLowerCase();\n\n    let charityTransfer: Transfer;\n    if (charityAddress && charityAmount > 0) {\n        charityTransfer = await executeTransfer(\n            wallet,\n            charityAmount,\n            assetIdLowercase,\n            charityAddress\n        );\n        elizaLogger.log(\n            \"Charity Transfer successful:\",\n            charityTransfer.toString()\n        );\n    }\n\n    const transferDetails = {\n        amount: transferAmount,\n        assetId: assetIdLowercase,\n        destination: targetAddress,\n        gasless: assetIdLowercase === \"usdc\" ? true : false,\n    };\n    elizaLogger.log(\"Initiating transfer:\", transferDetails);\n    const transfer = await wallet.createTransfer(transferDetails);\n    elizaLogger.log(\"Transfer initiated:\", transfer.toString());\n    await transfer.wait();\n\n    let responseText = `Transfer executed successfully:\n- Amount: ${transfer.getAmount()}\n- Asset: ${assetIdLowercase}\n- Destination: ${targetAddress}\n- Transaction URL: ${transfer.getTransactionLink() || \"\"}`;\n\n    if (charityTransfer) {\n        responseText += `\n- Charity Amount: ${charityTransfer.getAmount()}\n- Charity Transaction URL: ${charityTransfer.getTransactionLink() || \"\"}`;\n    } else {\n        responseText += \"\\n(Note: Charity transfer was not completed)\";\n    }\n\n    elizaLogger.log(responseText);\n\n    return {\n        transfer,\n        charityTransfer,\n        responseText,\n    };\n}\n\n/**\n * Executes a transfer.\n * @param {Wallet} wallet - The wallet to use.\n * @param {number} amount - The amount to transfer.\n * @param {string} sourceAsset - The source asset to transfer.\n * @param {string} targetAddress - The target address to transfer to.\n */\nexport async function executeTransfer(\n    wallet: Wallet,\n    amount: number,\n    sourceAsset: string,\n    targetAddress: string\n) {\n    const assetIdLowercase = sourceAsset.toLowerCase();\n    const transferDetails = {\n        amount,\n        assetId: assetIdLowercase,\n        destination: targetAddress,\n        gasless: assetIdLowercase === \"usdc\" ? true : false,\n    };\n    elizaLogger.log(\"Initiating transfer:\", transferDetails);\n    let transfer: Transfer | undefined;\n    try {\n        transfer = await wallet.createTransfer(transferDetails);\n        elizaLogger.log(\"Transfer initiated:\", transfer.toString());\n        await transfer.wait({\n            intervalSeconds: 1,\n            timeoutSeconds: 20,\n        });\n    } catch (error) {\n        elizaLogger.error(\"Error executing transfer:\", error);\n    }\n    return transfer;\n}\n\n/**\n * Gets the charity address based on the network.\n * @param {string} network - The network to use.\n * @param {boolean} isCharitable - Whether charity donations are enabled\n * @throws {Error} If charity address for the network is not configured when charity is enabled\n */\nexport function getCharityAddress(\n    network: string,\n    isCharitable = false\n): string | null {\n    // Check both environment variable and passed parameter\n    const isCharityEnabled =\n        process.env.IS_CHARITABLE === \"true\" && isCharitable;\n\n    if (!isCharityEnabled) {\n        return null;\n    }\n    const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\n    const charityAddress = settings[networkKey];\n\n    if (!charityAddress) {\n        throw new Error(\n            `Charity address not configured for network ${network}. Please set ${networkKey} in your environment variables.`\n        );\n    }\n\n    return charityAddress;\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObject,\n    ModelClass,\n    type Provider,\n} from \"@elizaos/core\";\nimport type {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@elizaos/core\";\nimport { type ChargeContent, ChargeSchema, isChargeContent } from \"../types\";\nimport { chargeTemplate, getChargeTemplate } from \"../templates\";\nimport { getWalletDetails } from \"../utils\";\nimport { Coinbase } from \"@coinbase/coinbase-sdk\";\nimport { ZodType } from \"zod\";\nconst url = \"https://api.commerce.coinbase.com/charges\";\ninterface ChargeRequest {\n    name: string;\n    description: string;\n    pricing_type: string;\n    local_price: {\n        amount: string;\n        currency: string;\n    };\n}\n\nexport async function createCharge(apiKey: string, params: ChargeRequest) {\n    elizaLogger.debug(\"Starting createCharge function\");\n    try {\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CC-Api-Key\": apiKey,\n            },\n            body: JSON.stringify(params),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to create charge: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data.data;\n    } catch (error) {\n        elizaLogger.error(\"Error creating charge:\", error);\n        throw error;\n    }\n}\n\n// Function to fetch all charges\nexport async function getAllCharges(apiKey: string) {\n    elizaLogger.debug(\"Starting getAllCharges function\");\n    try {\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CC-Api-Key\": apiKey,\n            },\n        });\n\n        if (!response.ok) {\n            console.error(\"response.status\", response.statusText);\n            throw new Error(\n                `Failed to fetch all charges: ${response.statusText}`\n            );\n        }\n\n        const data = await response.json();\n        return data.data;\n    } catch (error) {\n        elizaLogger.error(\"Error fetching charges:\", error);\n        throw error;\n    }\n}\n\n// Function to fetch details of a specific charge\nexport async function getChargeDetails(apiKey: string, chargeId: string) {\n    elizaLogger.debug(\"Starting getChargeDetails function\");\n    const getUrl = `${url}/${chargeId}`;\n\n    try {\n        const response = await fetch(getUrl, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CC-Api-Key\": apiKey,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(\n                `Failed to fetch charge details: ${response.statusText}`\n            );\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        elizaLogger.error(\n            `Error fetching charge details for ID ${chargeId}:`,\n            error\n        );\n        throw error;\n    }\n}\n\nexport const createCoinbaseChargeAction: Action = {\n    name: \"CREATE_CHARGE\",\n    similes: [\n        \"MAKE_CHARGE\",\n        \"INITIATE_CHARGE\",\n        \"GENERATE_CHARGE\",\n        \"CREATE_TRANSACTION\",\n        \"COINBASE_CHARGE\",\n        \"GENERATE_INVOICE\",\n        \"CREATE_PAYMENT\",\n        \"SETUP_BILLING\",\n        \"REQUEST_PAYMENT\",\n        \"CREATE_CHECKOUT\",\n        \"GET_CHARGE_STATUS\",\n        \"LIST_CHARGES\",\n    ],\n    description:\n        \"Create and manage payment charges using Coinbase Commerce. Supports fixed and dynamic pricing, multiple currencies (USD, EUR, USDC), and provides charge status tracking and management features.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\n            \"COINBASE_COMMERCE_KEY\"\n        );\n\n        // Ensure Coinbase Commerce API key is available\n        return coinbaseCommerceKeyOk;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Composing state for message:\", message);\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const context = composeContext({\n            state,\n            template: chargeTemplate,\n        });\n\n        const chargeDetails = await generateObject({\n            runtime,\n            context,\n            modelClass: ModelClass.LARGE,\n            schema: ChargeSchema as ZodType,\n        });\n        if (!isChargeContent(chargeDetails.object)) {\n            throw new Error(\"Invalid content\");\n        }\n        const charge = chargeDetails.object as ChargeContent;\n        if (!charge || !charge.price || !charge.type) {\n            callback(\n                {\n                    text: \"Invalid charge details provided.\",\n                },\n                []\n            );\n            return;\n        }\n\n        elizaLogger.info(\"Charge details received:\", chargeDetails);\n\n        // Initialize Coinbase Commerce client\n        elizaLogger.debug(\"Starting Coinbase Commerce client initialization\");\n        try {\n            // Create a charge\n            const chargeResponse = await createCharge(\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\"),\n                {\n                    local_price: {\n                        amount: charge.price.toString(),\n                        currency: charge.currency,\n                    },\n                    pricing_type: charge.type,\n                    name: charge.name,\n                    description: charge.description,\n                }\n            );\n\n            elizaLogger.info(\n                \"Coinbase Commerce charge created:\",\n                chargeResponse\n            );\n\n            callback(\n                {\n                    text: `Charge created successfully: ${chargeResponse.hosted_url}`,\n                    attachments: [\n                        {\n                            id: chargeResponse.id,\n                            url: chargeResponse.hosted_url,\n                            title: \"Coinbase Commerce Charge\",\n                            description: `Charge ID: ${chargeResponse.id}`,\n                            text: `Pay here: ${chargeResponse.hosted_url}`,\n                            source: \"coinbase\",\n                        },\n                    ],\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\n                \"Error creating Coinbase Commerce charge:\",\n                error\n            );\n            callback(\n                {\n                    text: \"Failed to create a charge. Please try again.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a charge for $100 USD for Digital Art NFT with description 'Exclusive digital artwork collection'\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Charge created successfully:\\n- Amount: $100 USD\\n- Name: Digital Art NFT\\n- Description: Exclusive digital artwork collection\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Set up a dynamic price charge for Premium Membership named 'VIP Access Pass'\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Charge created successfully:\\n- Type: dynamic_price\\n- Name: VIP Access Pass\\n- Description: Premium Membership\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Generate a payment request for 50 EUR for Workshop Registration\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Charge created successfully:\\n- Amount: 50 EUR\\n- Name: Workshop Registration\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create an invoice for 1000 USDC for Consulting Services\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Charge created successfully:\\n- Amount: 1000 USDC\\n- Name: Consulting Services\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check the status of charge abc-123-def\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Charge details retrieved:\\n- ID: abc-123-def\\n- Status: COMPLETED\\n- Amount: 100 USD\\n- Created: 2024-01-20T10:00:00Z\\n- Expires: 2024-01-21T10:00:00Z\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"List all active charges\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Active charges retrieved:\\n1. ID: abc-123 - $100 USD - Digital Art NFT\\n2. ID: def-456 - 50 EUR - Workshop\\n3. ID: ghi-789 - 1000 USDC - Consulting\\n\\nTotal active charges: 3\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const getAllChargesAction: Action = {\n    name: \"GET_ALL_CHARGES\",\n    similes: [\"FETCH_ALL_CHARGES\", \"RETRIEVE_ALL_CHARGES\", \"LIST_ALL_CHARGES\"],\n    description: \"Fetch all charges using Coinbase Commerce.\",\n    validate: async (runtime: IAgentRuntime) => {\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\n            \"COINBASE_COMMERCE_KEY\"\n        );\n\n        // Ensure Coinbase Commerce API key is available\n        return coinbaseCommerceKeyOk;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        try {\n            elizaLogger.info(\"Composing state for message:\", message);\n            if (!state) {\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n            const charges = await getAllCharges(\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\")\n            );\n\n            elizaLogger.info(\"Fetched all charges:\", charges);\n\n            callback(\n                {\n                    text: `Successfully fetched all charges. Total charges: ${charges.length}`,\n                    attachments: charges,\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error fetching all charges:\", error);\n            callback(\n                {\n                    text: \"Failed to fetch all charges. Please try again.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Fetch all charges\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Successfully fetched all charges.\",\n                    action: \"GET_ALL_CHARGES\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const getChargeDetailsAction: Action = {\n    name: \"GET_CHARGE_DETAILS\",\n    similes: [\"FETCH_CHARGE_DETAILS\", \"RETRIEVE_CHARGE_DETAILS\", \"GET_CHARGE\"],\n    description: \"Fetch details of a specific charge using Coinbase Commerce.\",\n    validate: async (runtime: IAgentRuntime) => {\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\n            \"COINBASE_COMMERCE_KEY\"\n        );\n\n        // Ensure Coinbase Commerce API key is available\n        return coinbaseCommerceKeyOk;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.info(\"Composing state for message:\", message);\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const context = composeContext({\n            state,\n            template: getChargeTemplate,\n        });\n        const chargeDetails = await generateObject({\n            runtime,\n            context,\n            modelClass: ModelClass.LARGE,\n            schema: ChargeSchema as ZodType,\n        });\n        if (!isChargeContent(chargeDetails.object)) {\n            throw new Error(\"Invalid content\");\n        }\n        const charge = chargeDetails.object as ChargeContent;\n        if (!charge.id) {\n            callback(\n                {\n                    text: \"Missing charge ID. Please provide a valid charge ID.\",\n                },\n                []\n            );\n            return;\n        }\n\n        try {\n            const chargeDetails = await getChargeDetails(\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\"),\n                charge.id\n            );\n\n            elizaLogger.info(\"Fetched charge details:\", chargeDetails);\n\n            const chargeData = chargeDetails.data;\n\n            callback(\n                {\n                    text: `Successfully fetched charge details for ID: ${charge.id}`,\n                    attachments: [\n                        {\n                            id: chargeData.id,\n                            url: chargeData.hosted_url,\n                            title: `Charge Details for ${charge.id}`,\n                            source: \"coinbase\",\n                            description: JSON.stringify(chargeDetails, null, 2),\n                            text: `Pay here: ${chargeData.hosted_url}`,\n                            contentType: \"application/json\",\n                        },\n                    ],\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\n                `Error fetching details for charge ID ${charge.id}:`,\n                error\n            );\n            callback(\n                {\n                    text: `Failed to fetch details for charge ID: ${charge.id}. Please try again.`,\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Fetch details of charge ID: 123456\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Successfully fetched charge details. {{charge.id}} for {{charge.amount}} {{charge.currency}} to {{charge.name}} for {{charge.description}}\",\n                    action: \"GET_CHARGE_DETAILS\",\n                },\n            },\n        ],\n    ],\n};\n\nexport const chargeProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Starting chargeProvider.get function\");\n        const charges = await getAllCharges(\n            runtime.getSetting(\"COINBASE_COMMERCE_KEY\")\n        );\n        // Ensure API key is available\n        const coinbaseAPIKey =\n            runtime.getSetting(\"COINBASE_API_KEY\") ??\n            process.env.COINBASE_API_KEY;\n        const coinbasePrivateKey =\n            runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n            process.env.COINBASE_PRIVATE_KEY;\n        const balances = [];\n        const transactions = [];\n        if (coinbaseAPIKey && coinbasePrivateKey) {\n            Coinbase.configure({\n                apiKeyName: coinbaseAPIKey,\n                privateKey: coinbasePrivateKey,\n            });\n            const { balances, transactions } = await getWalletDetails(runtime);\n            elizaLogger.info(\"Current Balances:\", balances);\n            elizaLogger.info(\"Last Transactions:\", transactions);\n        }\n        const formattedCharges = charges.map((charge) => ({\n            id: charge.id,\n            name: charge.name,\n            description: charge.description,\n            pricing: charge.pricing,\n        }));\n        elizaLogger.info(\"Charges:\", formattedCharges);\n        return { charges: formattedCharges, balances, transactions };\n    },\n};\n\nexport const coinbaseCommercePlugin: Plugin = {\n    name: \"coinbaseCommerce\",\n    description:\n        \"Integration with Coinbase Commerce for creating and managing charges.\",\n    actions: [\n        createCoinbaseChargeAction,\n        getAllChargesAction,\n        getChargeDetailsAction,\n    ],\n    evaluators: [],\n    providers: [chargeProvider],\n};\n","import { Coinbase } from \"@coinbase/coinbase-sdk\";\nimport {\n    type Action,\n    type Plugin,\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type Provider,\n} from \"@elizaos/core\";\nimport { executeTradeAndCharityTransfer, getWalletDetails } from \"../utils\";\nimport { tradeTemplate } from \"../templates\";\nimport { isTradeContent, type TradeContent, TradeSchema } from \"../types\";\nimport { readFile } from \"fs/promises\";\nimport { parse } from \"csv-parse/sync\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport fs from \"fs\";\nimport { createArrayCsvWriter } from \"csv-writer\";\n\n// Dynamically resolve the file path to the src/plugins directory\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\nconst tradeCsvFilePath = path.join(baseDir, \"trades.csv\");\n\nexport const tradeProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Starting tradeProvider.get function\");\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n            elizaLogger.info(\"Reading CSV file from:\", tradeCsvFilePath);\n\n            // Check if the file exists; if not, create it with headers\n            if (!fs.existsSync(tradeCsvFilePath)) {\n                elizaLogger.warn(\"CSV file not found. Creating a new one.\");\n                const csvWriter = createArrayCsvWriter({\n                    path: tradeCsvFilePath,\n                    header: [\n                        \"Network\",\n                        \"From Amount\",\n                        \"Source Asset\",\n                        \"To Amount\",\n                        \"Target Asset\",\n                        \"Status\",\n                        \"Transaction URL\",\n                    ],\n                });\n                await csvWriter.writeRecords([]); // Create an empty file with headers\n                elizaLogger.info(\"New CSV file created with headers.\");\n            }\n\n            // Read and parse the CSV file\n            const csvData = await readFile(tradeCsvFilePath, \"utf-8\");\n            const records = parse(csvData, {\n                columns: true,\n                skip_empty_lines: true,\n            });\n\n            elizaLogger.info(\"Parsed CSV records:\", records);\n            const { balances, transactions } = await getWalletDetails(runtime);\n            elizaLogger.info(\"Current Balances:\", balances);\n            elizaLogger.info(\"Last Transactions:\", transactions);\n            return {\n                currentTrades: records.map((record: any) => ({\n                    network: record[\"Network\"] || undefined,\n                    amount: Number.parseFloat(record[\"From Amount\"]) || undefined,\n                    sourceAsset: record[\"Source Asset\"] || undefined,\n                    toAmount: Number.parseFloat(record[\"To Amount\"]) || undefined,\n                    targetAsset: record[\"Target Asset\"] || undefined,\n                    status: record[\"Status\"] || undefined,\n                    transactionUrl: record[\"Transaction URL\"] || \"\",\n                })),\n                balances,\n                transactions,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in tradeProvider:\", error);\n            return [];\n        }\n    },\n};\n\nexport const executeTradeAction: Action = {\n    name: \"EXECUTE_TRADE\",\n    description:\n        \"Execute a trade between two assets using the Coinbase SDK and log the result.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime for EXECUTE_TRADE...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting EXECUTE_TRADE handler...\");\n\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            const context = composeContext({\n                state,\n                template: tradeTemplate,\n            });\n\n            const tradeDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.LARGE,\n                schema: TradeSchema,\n            });\n\n            if (!isTradeContent(tradeDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid trade details. Ensure network, amount, source asset, and target asset are correctly specified.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const { network, amount, sourceAsset, targetAsset } =\n                tradeDetails.object as TradeContent;\n\n            const allowedNetworks = [\"base\", \"sol\", \"eth\", \"arb\", \"pol\"];\n            if (!allowedNetworks.includes(network)) {\n                callback(\n                    {\n                        text: `Invalid network. Supported networks are: ${allowedNetworks.join(\n                            \", \"\n                        )}.`,\n                    },\n                    []\n                );\n                return;\n            }\n\n            const { trade, transfer } = await executeTradeAndCharityTransfer(\n                runtime,\n                network,\n                amount,\n                sourceAsset,\n                targetAsset\n            );\n\n            let responseText = `Trade executed successfully:\n- Network: ${network}\n- Amount: ${trade.getFromAmount()}\n- From: ${sourceAsset}\n- To: ${targetAsset}\n- Transaction URL: ${trade.getTransaction().getTransactionLink() || \"\"}\n- Charity Transaction URL: ${transfer.getTransactionLink() || \"\"}`;\n\n            if (transfer) {\n                responseText += `\\n- Charity Amount: ${transfer.getAmount()}`;\n            } else {\n                responseText += \"\\n(Note: Charity transfer was not completed)\";\n            }\n\n            callback({ text: responseText }, []);\n        } catch (error) {\n            elizaLogger.error(\"Error during trade execution:\", error);\n            callback(\n                {\n                    text: \"Failed to execute the trade. Please check the logs for more details.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on base network\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Swapped 1 ETH for USDC on base network\\n- Transaction URL: https://basescan.io/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Convert 1000 USDC to SOL on Solana\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Converted 1000 USDC to SOL on Solana network\\n- Transaction URL: https://solscan.io/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Exchange 5 WETH for ETH on Arbitrum\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Exchanged 5 WETH for ETH on Arbitrum network\\n- Transaction URL: https://arbiscan.io/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Trade 100 GWEI for USDC on Polygon\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Traded 100 GWEI for USDC on Polygon network\\n- Transaction URL: https://polygonscan.com/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Market buy ETH with 500 USDC on base\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Bought ETH with 500 USDC on base network\\n- Transaction URL: https://basescan.io/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Sell 2.5 SOL for USDC on Solana mainnet\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Trade executed successfully:\\n- Sold 2.5 SOL for USDC on Solana network\\n- Transaction URL: https://solscan.io/tx/...\\n- Status: Completed\",\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"EXECUTE_TRADE\", // Primary action name\n        \"SWAP_TOKENS\", // For token swaps\n        \"CONVERT_CURRENCY\", // For currency conversion\n        \"EXCHANGE_ASSETS\", // For asset exchange\n        \"MARKET_BUY\", // For buying assets\n        \"MARKET_SELL\", // For selling assets\n        \"TRADE_CRYPTO\", // Generic crypto trading\n    ],\n};\n\nexport const tradePlugin: Plugin = {\n    name: \"tradePlugin\",\n    description: \"Enables asset trading using the Coinbase SDK.\",\n    actions: [executeTradeAction],\n    providers: [tradeProvider],\n};\n","import { Coinbase, readContract, type SmartContract } from \"@coinbase/coinbase-sdk\";\nimport {\n    type Action,\n    type Plugin,\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    composeContext,\n    generateObject,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { initializeWallet } from \"../utils\";\nimport {\n    contractInvocationTemplate,\n    tokenContractTemplate,\n    readContractTemplate,\n} from \"../templates\";\nimport {\n    ContractInvocationSchema,\n    TokenContractSchema,\n    isContractInvocationContent,\n    isTokenContractContent,\n    ReadContractSchema,\n    isReadContractContent,\n} from \"../types\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createArrayCsvWriter } from \"csv-writer\";\nimport fs from \"fs\";\nimport { ABI } from \"../constants\";\n\n// Dynamically resolve the file path to the src/plugins directory\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\nconst contractsCsvFilePath = path.join(baseDir, \"contracts.csv\");\n\n// Add this helper at the top level\nconst serializeBigInt = (value: any): any => {\n    if (typeof value === \"bigint\") {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return value.map(serializeBigInt);\n    }\n    if (typeof value === \"object\" && value !== null) {\n        return Object.fromEntries(\n            Object.entries(value).map(([k, v]) => [k, serializeBigInt(v)])\n        );\n    }\n    return value;\n};\n\nexport const deployTokenContractAction: Action = {\n    name: \"DEPLOY_TOKEN_CONTRACT\",\n    description:\n        \"Deploy an ERC20, ERC721, or ERC1155 token contract using the Coinbase SDK\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime for DEPLOY_TOKEN_CONTRACT...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting DEPLOY_TOKEN_CONTRACT handler...\");\n\n        try {\n            Coinbase.configure({\n                apiKeyName: runtime.getSetting(\"COINBASE_API_KEY\") ?? process.env.COINBASE_API_KEY,\n                privateKey: runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ?? process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            // Ensure CSV file exists\n            if (!fs.existsSync(contractsCsvFilePath)) {\n                const csvWriter = createArrayCsvWriter({\n                    path: contractsCsvFilePath,\n                    header: [\n                        \"Contract Type\",\n                        \"Name\",\n                        \"Symbol\",\n                        \"Network\",\n                        \"Contract Address\",\n                        \"Transaction URL\",\n                        \"Base URI\",\n                        \"Total Supply\",\n                    ],\n                });\n                await csvWriter.writeRecords([]);\n            }\n\n            const context = composeContext({\n                state,\n                template: tokenContractTemplate,\n            });\n\n            const contractDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.SMALL,\n                schema: TokenContractSchema,\n            });\n            elizaLogger.info(\"Contract details:\", contractDetails.object);\n\n            if (!isTokenContractContent(contractDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid contract details. Please check the inputs.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const {\n                contractType,\n                name,\n                symbol,\n                network,\n                baseURI,\n                totalSupply,\n            } = contractDetails.object;\n            elizaLogger.info(\"Contract details:\", contractDetails.object);\n            const wallet = await initializeWallet(runtime, network);\n            let contract: SmartContract;\n            let deploymentDetails;\n\n            switch (contractType.toLowerCase()) {\n                case \"erc20\":\n                    contract = await wallet.deployToken({\n                        name,\n                        symbol,\n                        totalSupply: totalSupply || 1000000,\n                    });\n                    deploymentDetails = {\n                        contractType: \"ERC20\",\n                        totalSupply,\n                        baseURI: \"N/A\",\n                    };\n                    break;\n\n                case \"erc721\":\n                    contract = await wallet.deployNFT({\n                        name,\n                        symbol,\n                        baseURI: baseURI || \"\",\n                    });\n                    deploymentDetails = {\n                        contractType: \"ERC721\",\n                        totalSupply: \"N/A\",\n                        baseURI,\n                    };\n                    break;\n                default:\n                    throw new Error(\n                        `Unsupported contract type: ${contractType}`\n                    );\n            }\n\n            // Wait for deployment to complete\n            await contract.wait();\n            elizaLogger.info(\"Deployment details:\", deploymentDetails);\n            elizaLogger.info(\"Contract deployed successfully:\", contract);\n            // Log deployment to CSV\n            const csvWriter = createArrayCsvWriter({\n                path: contractsCsvFilePath,\n                header: [\n                    \"Contract Type\",\n                    \"Name\",\n                    \"Symbol\",\n                    \"Network\",\n                    \"Contract Address\",\n                    \"Transaction URL\",\n                    \"Base URI\",\n                    \"Total Supply\",\n                ],\n                append: true,\n            });\n            const transaction =\n                contract.getTransaction()?.getTransactionLink() || \"\";\n            const contractAddress = contract.getContractAddress();\n            await csvWriter.writeRecords([\n                [\n                    deploymentDetails.contractType,\n                    name,\n                    symbol,\n                    network,\n                    contractAddress,\n                    transaction,\n                    deploymentDetails.baseURI,\n                    deploymentDetails.totalSupply || \"\",\n                ],\n            ]);\n\n            callback(\n                {\n                    text: `Token contract deployed successfully:\n- Type: ${deploymentDetails.contractType}\n- Name: ${name}\n- Symbol: ${symbol}\n- Network: ${network}\n- Contract Address: ${contractAddress}\n- Transaction URL: ${transaction}\n${deploymentDetails.baseURI !== \"N/A\" ? `- Base URI: ${deploymentDetails.baseURI}` : \"\"}\n${deploymentDetails.totalSupply !== \"N/A\" ? `- Total Supply: ${deploymentDetails.totalSupply}` : \"\"}\n\nContract deployment has been logged to the CSV file.`,\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error deploying token contract:\", error);\n            callback(\n                {\n                    text: \"Failed to deploy token contract. Please check the logs for more details.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC721 token named 'MyNFT' with symbol 'MNFT' on base network with URI 'https://pbs.twimg.com/profile_images/1848823420336934913/oI0-xNGe_400x400.jpg'\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Token contract deployed successfully:\n- Type: ERC20\n- Name: MyToken\n- Symbol: MTK\n- Network: base\n- Contract Address: 0x...\n- Transaction URL: https://basescan.org/tx/...\n- Total Supply: 1000000`,\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC721 token named 'MyNFT' with symbol 'MNFT' on the base network\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Token contract deployed successfully:\n- Type: ERC721\n- Name: MyNFT\n- Symbol: MNFT\n- Network: base\n- Contract Address: 0x...\n- Transaction URL: https://basescan.org/tx/...\n- URI: https://pbs.twimg.com/profile_images/1848823420336934913/oI0-xNGe_400x400.jpg`,\n                },\n            },\n        ],\n    ],\n    similes: [\"DEPLOY_CONTRACT\", \"CREATE_TOKEN\", \"MINT_TOKEN\", \"CREATE_NFT\"],\n};\n\n// Add to tokenContract.ts\nexport const invokeContractAction: Action = {\n    name: \"INVOKE_CONTRACT\",\n    description:\n        \"Invoke a method on a deployed smart contract using the Coinbase SDK\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime for INVOKE_CONTRACT...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting INVOKE_CONTRACT handler...\");\n\n        try {\n            Coinbase.configure({\n                apiKeyName: runtime.getSetting(\"COINBASE_API_KEY\") ?? process.env.COINBASE_API_KEY,\n                privateKey: runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ?? process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            const context = composeContext({\n                state,\n                template: contractInvocationTemplate,\n            });\n\n            const invocationDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.LARGE,\n                schema: ContractInvocationSchema,\n            });\n            elizaLogger.info(\"Invocation details:\", invocationDetails.object);\n            if (!isContractInvocationContent(invocationDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid contract invocation details. Please check the inputs.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const {\n                contractAddress,\n                method,\n                args,\n                amount,\n                assetId,\n                networkId,\n            } = invocationDetails.object;\n            const wallet = await initializeWallet(runtime, networkId);\n\n            // Prepare invocation options\n            const invocationOptions = {\n                contractAddress,\n                method,\n                abi: ABI,\n                args: {\n                    ...args,\n                    amount: args.amount || amount, // Ensure amount is passed in args\n                },\n                networkId,\n                assetId,\n            };\n            elizaLogger.info(\"Invocation options:\", invocationOptions);\n            // Invoke the contract\n            const invocation = await wallet.invokeContract(invocationOptions);\n\n            // Wait for the transaction to be mined\n            await invocation.wait();\n\n            // Log the invocation to CSV\n            const csvWriter = createArrayCsvWriter({\n                path: contractsCsvFilePath,\n                header: [\n                    \"Contract Address\",\n                    \"Method\",\n                    \"Network\",\n                    \"Status\",\n                    \"Transaction URL\",\n                    \"Amount\",\n                    \"Asset ID\",\n                ],\n                append: true,\n            });\n\n            await csvWriter.writeRecords([\n                [\n                    contractAddress,\n                    method,\n                    networkId,\n                    invocation.getStatus(),\n                    invocation.getTransactionLink() || \"\",\n                    amount || \"\",\n                    assetId || \"\",\n                ],\n            ]);\n\n            callback(\n                {\n                    text: `Contract method invoked successfully:\n- Contract Address: ${contractAddress}\n- Method: ${method}\n- Network: ${networkId}\n- Status: ${invocation.getStatus()}\n- Transaction URL: ${invocation.getTransactionLink() || \"N/A\"}\n${amount ? `- Amount: ${amount}` : \"\"}\n${assetId ? `- Asset ID: ${assetId}` : \"\"}\n\nContract invocation has been logged to the CSV file.`,\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error invoking contract method:\", error);\n            callback(\n                {\n                    text: \"Failed to invoke contract method. Please check the logs for more details.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Call the 'transfer' method on my ERC20 token contract at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 with amount 100 to recipient 0xbcF7C64B880FA89a015970dC104E848d485f99A3\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Contract method invoked successfully:\n- Contract Address: 0x123...\n- Method: transfer\n- Network: base\n- Status: SUCCESS\n- Transaction URL: https://basescan.org/tx/...\n- Amount: 100\n- Asset ID: wei\n\nContract invocation has been logged to the CSV file.`,\n                },\n            },\n        ],\n    ],\n    similes: [\"CALL_CONTRACT\", \"EXECUTE_CONTRACT\", \"INTERACT_WITH_CONTRACT\"],\n};\n\nexport const readContractAction: Action = {\n    name: \"READ_CONTRACT\",\n    description:\n        \"Read data from a deployed smart contract using the Coinbase SDK\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime for READ_CONTRACT...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting READ_CONTRACT handler...\");\n\n        try {\n            Coinbase.configure({\n                apiKeyName: runtime.getSetting(\"COINBASE_API_KEY\") ?? process.env.COINBASE_API_KEY,\n                privateKey: runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ?? process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            const context = composeContext({\n                state,\n                template: readContractTemplate,\n            });\n\n            const readDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.SMALL,\n                schema: ReadContractSchema,\n            });\n\n            if (!isReadContractContent(readDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid contract read details. Please check the inputs.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const { contractAddress, method, args, networkId, abi } =\n                readDetails.object;\n            elizaLogger.info(\"Reading contract:\", {\n                contractAddress,\n                method,\n                args,\n                networkId,\n                abi,\n            });\n\n            const result = await readContract({\n                networkId,\n                contractAddress,\n                method,\n                args,\n                abi: ABI as any,\n            });\n\n            // Serialize the result before using it\n            const serializedResult = serializeBigInt(result);\n\n            elizaLogger.info(\"Contract read result:\", serializedResult);\n\n            callback(\n                {\n                    text: `Contract read successful:\n- Contract Address: ${contractAddress}\n- Method: ${method}\n- Network: ${networkId}\n- Result: ${JSON.stringify(serializedResult, null, 2)}`,\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error reading contract:\", error);\n            callback(\n                {\n                    text: `Failed to read contract: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Read the balance of address 0xbcF7C64B880FA89a015970dC104E848d485f99A3 from the ERC20 contract at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 on eth\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Contract read successful:\n- Contract Address: 0x37f2131ebbc8f97717edc3456879ef56b9f4b97b\n- Method: balanceOf\n- Network: eth\n- Result: \"1000000\"`,\n                },\n            },\n        ],\n    ],\n    similes: [\"READ_CONTRACT\", \"GET_CONTRACT_DATA\", \"QUERY_CONTRACT\"],\n};\n\nexport const tokenContractPlugin: Plugin = {\n    name: \"tokenContract\",\n    description:\n        \"Enables deployment, invocation, and reading of ERC20, ERC721, and ERC1155 token contracts using the Coinbase SDK\",\n    actions: [\n        deployTokenContractAction,\n        invokeContractAction,\n        readContractAction,\n    ],\n};\n","export const ABI = [\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\",\n                internalType: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"spender\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n        anonymous: false,\n    },\n    {\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n        anonymous: false,\n    },\n];\n","import { Coinbase, Webhook } from \"@coinbase/coinbase-sdk\";\nimport {\n    type Action,\n    type Plugin,\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type Provider,\n} from \"@elizaos/core\";\nimport { WebhookSchema, isWebhookContent, type WebhookContent } from \"../types\";\nimport { webhookTemplate } from \"../templates\";\nimport { appendWebhooksToCsv } from \"../utils\";\n\nexport const webhookProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Starting webhookProvider.get function\");\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            // List all webhooks\n            const resp = await Webhook.list();\n            elizaLogger.info(\"Listing all webhooks:\", resp.data);\n\n            return {\n                webhooks: resp.data.map((webhook: Webhook) => ({\n                    id: webhook.getId(),\n                    networkId: webhook.getNetworkId(),\n                    eventType: webhook.getEventType(),\n                    eventFilters: webhook.getEventFilters(),\n                    eventTypeFilter: webhook.getEventTypeFilter(),\n                    notificationURI: webhook.getNotificationURI(),\n                })),\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in webhookProvider:\", error);\n            return [];\n        }\n    },\n};\n\nexport const createWebhookAction: Action = {\n    name: \"CREATE_WEBHOOK\",\n    description: \"Create a new webhook using the Coinbase SDK.\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.info(\"Validating runtime for CREATE_WEBHOOK...\");\n        return (\n            !!(\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\n                process.env.COINBASE_PRIVATE_KEY\n            ) &&\n            !!(\n                runtime.character.settings.secrets?.COINBASE_NOTIFICATION_URI ||\n                process.env.COINBASE_NOTIFICATION_URI\n            )\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"Starting CREATE_WEBHOOK handler...\");\n\n        try {\n            Coinbase.configure({\n                apiKeyName:\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                privateKey:\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY,\n            });\n\n            const context = composeContext({\n                state,\n                template: webhookTemplate,\n            });\n\n            const webhookDetails = await generateObject({\n                runtime,\n                context,\n                modelClass: ModelClass.LARGE,\n                schema: WebhookSchema,\n            });\n\n            if (!isWebhookContent(webhookDetails.object)) {\n                callback(\n                    {\n                        text: \"Invalid webhook details. Ensure network, URL, event type, and contract address are correctly specified.\",\n                    },\n                    []\n                );\n                return;\n            }\n\n            const { networkId, eventType, eventFilters, eventTypeFilter } =\n                webhookDetails.object as WebhookContent;\n            const notificationUri =\n                runtime.getSetting(\"COINBASE_NOTIFICATION_URI\") ??\n                process.env.COINBASE_NOTIFICATION_URI;\n\n            if (!notificationUri) {\n                callback(\n                    {\n                        text: \"Notification URI is not set in the environment variables.\",\n                    },\n                    []\n                );\n                return;\n            }\n            elizaLogger.info(\"Creating webhook with details:\", {\n                networkId,\n                notificationUri,\n                eventType,\n                eventTypeFilter,\n                eventFilters,\n            });\n            const webhook = await Webhook.create({\n                networkId,\n                notificationUri,\n                eventType,\n                eventFilters,\n            });\n            elizaLogger.info(\n                \"Webhook created successfully:\",\n                webhook.toString()\n            );\n            callback(\n                {\n                    text: `Webhook created successfully: ${webhook.toString()}`,\n                },\n                []\n            );\n            await appendWebhooksToCsv([webhook]);\n            elizaLogger.info(\"Webhook appended to CSV successfully\");\n        } catch (error) {\n            elizaLogger.error(\"Error during webhook creation:\", error);\n            callback(\n                {\n                    text: \"Failed to create the webhook. Please check the logs for more details.\",\n                },\n                []\n            );\n        }\n    },\n    similes: [\"WEBHOOK\", \"NOTIFICATION\", \"EVENT\", \"TRIGGER\", \"LISTENER\"],\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a webhook on base for address 0xbcF7C64B880FA89a015970dC104E848d485f99A3 on the event type: transfers\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Webhook created successfully: Webhook ID: {{webhookId}}, Network ID: {{networkId}}, Notification URI: {{notificationUri}}, Event Type: {{eventType}}`,\n                    action: \"CREATE_WEBHOOK\",\n                },\n            },\n        ],\n    ],\n};\n\nexport const webhookPlugin: Plugin = {\n    name: \"webhookPlugin\",\n    description: \"Manages webhooks using the Coinbase SDK.\",\n    actions: [createWebhookAction],\n    providers: [webhookProvider],\n};\n","import jwt from 'jsonwebtoken';\nimport { BASE_URL, ALGORITHM, JWT_ISSUER } from './constants';\nimport crypto from 'crypto';\n\nexport function generateToken(\n    requestMethod: string,\n    requestPath: string,\n    apiKey: string,\n    apiSecret: string\n): string {\n    const uri = `${requestMethod} ${BASE_URL}${requestPath}`;\n    const payload = {\n        iss: JWT_ISSUER,\n        nbf: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 120,\n        sub: apiKey,\n        uri,\n    };\n\n    const header = {\n        alg: ALGORITHM,\n        kid: apiKey,\n        nonce: crypto.randomBytes(16).toString('hex'),\n    };\n    const options: jwt.SignOptions = {\n        algorithm: ALGORITHM as jwt.Algorithm,\n        header: header,\n    };\n\n    return jwt.sign(payload, apiSecret as string, options);\n}\n","export const BASE_URL = 'api.coinbase.com';\nexport const API_PREFIX = '/api/v3/brokerage';\nexport const ALGORITHM = 'ES256';\nexport const VERSION = '0.1.0';\nexport const USER_AGENT = `coinbase-advanced-ts/${VERSION}`;\nexport const JWT_ISSUER = 'cdp';\n","import { generateToken } from '../jwt-generator';\nimport fetch, { Headers, type RequestInit, type Response } from 'node-fetch';\nimport { BASE_URL, USER_AGENT } from '../constants';\nimport type { RequestOptions } from './types/request-types';\nimport { handleException } from './errors';\n\nexport class RESTBase {\n    private apiKey: string | undefined;\n    private apiSecret: string | undefined;\n\n    constructor(key?: string, secret?: string) {\n        if (!key || !secret) {\n            console.log(\n                'Could not authenticate. Only public endpoints accessible.'\n            );\n        }\n        this.apiKey = key;\n        this.apiSecret = secret;\n    }\n\n    request(options: RequestOptions): Promise<any> {\n        const { method, endpoint, isPublic } = options;\n        let { queryParams, bodyParams } = options;\n\n        queryParams = queryParams ? this.filterParams(queryParams) : {};\n\n        if (bodyParams !== undefined)\n            bodyParams = bodyParams ? this.filterParams(bodyParams) : {};\n\n        return this.prepareRequest(\n            method,\n            endpoint,\n            queryParams,\n            bodyParams,\n            isPublic\n        );\n    }\n\n    prepareRequest(\n        httpMethod: string,\n        urlPath: string,\n        queryParams?: Record<string, any>,\n        bodyParams?: Record<string, any>,\n        isPublic?: boolean\n    ) {\n        const headers: Headers = this.setHeaders(httpMethod, urlPath, isPublic);\n\n        const requestOptions: RequestInit = {\n            method: httpMethod,\n            headers: headers,\n            body: JSON.stringify(bodyParams),\n        };\n\n        const queryString = this.buildQueryString(queryParams);\n        const url = `https://${BASE_URL}${urlPath}${queryString}`;\n\n        return this.sendRequest(headers, requestOptions, url);\n    }\n\n    async sendRequest(\n        headers: Headers,\n        requestOptions: RequestInit,\n        url: string\n    ) {\n        const response: Response = await fetch(url, requestOptions);\n        const responseText = await response.text();\n        handleException(response, responseText, response.statusText);\n\n        return responseText;\n    }\n\n    setHeaders(httpMethod: string, urlPath: string, isPublic?: boolean) {\n        const headers: Headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        headers.append('User-Agent', USER_AGENT);\n        if (this.apiKey !== undefined && this.apiSecret !== undefined)\n            headers.append(\n                'Authorization',\n                `Bearer ${generateToken(\n                    httpMethod,\n                    urlPath,\n                    this.apiKey,\n                    this.apiSecret\n                )}`\n            );\n        else if (isPublic == undefined || isPublic == false)\n            throw new Error(\n                'Attempting to access authenticated endpoint with invalid API_KEY or API_SECRET.'\n            );\n\n        return headers;\n    }\n\n    filterParams(data: Record<string, any>) {\n        const filteredParams: Record<string, any> = {};\n\n        for (const key in data) {\n            if (data[key] !== undefined) {\n                filteredParams[key] = data[key];\n            }\n        }\n\n        return filteredParams;\n    }\n\n    buildQueryString(queryParams?: Record<string, any>): string {\n        if (!queryParams || Object.keys(queryParams).length === 0) {\n            return '';\n        }\n\n        const queryString = Object.entries(queryParams)\n            .flatMap(([key, value]) => {\n                if (Array.isArray(value)) {\n                    return value.map(\n                        (item) =>\n                            `${encodeURIComponent(key)}=${encodeURIComponent(item)}`\n                    );\n                } else {\n                    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n                }\n            })\n            .join('&');\n\n        return `?${queryString}`;\n    }\n}\n","import type { Response } from 'node-fetch';\n\nclass CoinbaseError extends Error {\n    statusCode: number;\n    response: Response;\n\n    constructor(message: string, statusCode: number, response: Response) {\n        super(message);\n        this.name = 'CoinbaseError';\n        this.statusCode = statusCode;\n        this.response = response;\n    }\n}\n\nexport function handleException(\n    response: Response,\n    responseText: string,\n    reason: string\n) {\n    let message: string | undefined;\n\n    if (\n        (400 <= response.status && response.status <= 499) ||\n        (500 <= response.status && response.status <= 599)\n    ) {\n        if (\n            response.status == 403 &&\n            responseText.includes('\"error_details\":\"Missing required scopes\"')\n        ) {\n            message = `${response.status} Coinbase Error: Missing Required Scopes. Please verify your API keys include the necessary permissions.`;\n        } else\n            message = `${response.status} Coinbase Error: ${reason} ${responseText}`;\n\n        throw new CoinbaseError(message, response.status, response);\n    }\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    GetAccountRequest,\n    GetAccountResponse,\n    ListAccountsRequest,\n    ListAccountsResponse,\n} from './types/accounts-types';\nimport { method } from './types/request-types';\n\n// [GET] Get Account\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getaccount\nexport function getAccount(\n    this: RESTBase,\n    { accountUuid }: GetAccountRequest\n): Promise<GetAccountResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/accounts/${accountUuid}`,\n        isPublic: false,\n    });\n}\n\n// [GET] List Accounts\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getaccounts\nexport function listAccounts(\n    this: RESTBase,\n    requestParams: ListAccountsRequest\n): Promise<ListAccountsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/accounts`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    CommitConvertTradeRequest,\n    CommitConvertTradeResponse,\n    CreateConvertQuoteRequest,\n    CreateConvertQuoteResponse,\n    GetConvertTradeRequest,\n    GetConvertTradeResponse,\n} from './types/converts-types';\nimport { method } from './types/request-types';\n\n// [POST] Create Convert Quote\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_createconvertquote\nexport function createConvertQuote(\n    this: RESTBase,\n    requestParams: CreateConvertQuoteRequest\n): Promise<CreateConvertQuoteResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/convert/quote`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Convert Trade\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getconverttrade\nexport function getConvertTrade(\n    this: RESTBase,\n    { tradeId, ...requestParams }: GetConvertTradeRequest\n): Promise<GetConvertTradeResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/convert/trade/${tradeId}`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Commit Connvert Trade\n// https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_commitconverttrade\nexport function commitConvertTrade(\n    this: RESTBase,\n    { tradeId, ...requestParams }: CommitConvertTradeRequest\n): Promise<CommitConvertTradeResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/convert/trade/${tradeId}`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\n\nimport { method } from './types/request-types';\nimport type { GetAPIKeyPermissionsResponse } from './types/dataAPI-types';\n\n// [GET] Get API Key Permissions\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getapikeypermissions\nexport function getAPIKeyPermissions(\n    this: RESTBase\n): Promise<GetAPIKeyPermissionsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/key_permissions`,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    GetTransactionsSummaryRequest,\n    GetTransactionsSummaryResponse,\n} from './types/fees-types';\nimport { method } from './types/request-types';\n\n// [GET] Get Transaction Summary\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_commitconverttrade\nexport function getTransactionSummary(\n    this: RESTBase,\n    requestParams: GetTransactionsSummaryRequest\n): Promise<GetTransactionsSummaryResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/transaction_summary`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    CancelPendingFuturesSweep,\n    GetCurrentMarginWindowRequest,\n    GetCurrentMarginWindowResponse,\n    GetFuturesBalanceSummaryResponse,\n    GetFuturesPositionRequest,\n    GetFuturesPositionResponse,\n    GetIntradayMarginSettingResponse,\n    ListFuturesPositionsResponse,\n    ListFuturesSweepsResponse,\n    ScheduleFuturesSweepRequest,\n    ScheduleFuturesSweepResponse,\n    SetIntradayMarginSettingRequest,\n    SetIntradayMarginSettingResponse,\n} from './types/futures-types';\nimport { method } from './types/request-types';\n\n// [GET] Get Futures Balance Summary\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmbalancesummary\nexport function getFuturesBalanceSummary(\n    this: RESTBase\n): Promise<GetFuturesBalanceSummaryResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/balance_summary`,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Intraday Margin Setting\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintradaymarginsetting\nexport function getIntradayMarginSetting(\n    this: RESTBase\n): Promise<GetIntradayMarginSettingResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/intraday/margin_setting`,\n        isPublic: false,\n    });\n}\n\n// [POST] Set Intraday Margin Setting\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_setintradaymarginsetting\nexport function setIntradayMarginSetting(\n    this: RESTBase,\n    requestParams: SetIntradayMarginSettingRequest\n): Promise<SetIntradayMarginSettingResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/cfm/intraday/margin_setting`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Current Margin Window\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getcurrentmarginwindow\nexport function getCurrentMarginWindow(\n    this: RESTBase,\n    requestParams: GetCurrentMarginWindowRequest\n): Promise<GetCurrentMarginWindowResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/intraday/current_margin_window`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] List Futures Positions\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmpositions\nexport function listFuturesPositions(\n    this: RESTBase\n): Promise<ListFuturesPositionsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/positions`,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Futures Position\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmposition\nexport function getFuturesPosition(\n    this: RESTBase,\n    { productId }: GetFuturesPositionRequest\n): Promise<GetFuturesPositionResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/positions/${productId}`,\n        isPublic: false,\n    });\n}\n\n// [POST] Schedule Futures Sweep\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_schedulefcmsweep\nexport function scheduleFuturesSweep(\n    this: RESTBase,\n    requestParams: ScheduleFuturesSweepRequest\n): Promise<ScheduleFuturesSweepResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/cfm/sweeps/schedule`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] List Futures Sweeps\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmsweeps\nexport function listFuturesSweeps(\n    this: RESTBase\n): Promise<ListFuturesSweepsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/cfm/sweeps`,\n        isPublic: false,\n    });\n}\n\n// [DELETE] Cancel Pending Futures Sweep\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_cancelfcmsweep\nexport function cancelPendingFuturesSweep(\n    this: RESTBase\n): Promise<CancelPendingFuturesSweep> {\n    return this.request({\n        method: method.DELETE,\n        endpoint: `${API_PREFIX}/cfm/sweeps`,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    CancelOrdersRequest,\n    CancelOrdersResponse,\n    ClosePositionRequest,\n    ClosePositionResponse,\n    CreateOrderRequest,\n    CreateOrderResponse,\n    EditOrderPreviewRequest,\n    EditOrderPreviewResponse,\n    EditOrderRequest,\n    EditOrderResponse,\n    GetOrderRequest,\n    GetOrderResponse,\n    ListFillsRequest,\n    ListFillsResponse,\n    ListOrdersRequest,\n    ListOrdersResponse,\n    PreviewOrderRequest,\n    PreviewOrderResponse,\n} from './types/orders-types';\nimport { method } from './types/request-types';\n\n// [POST] Create Order\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_postorder\nexport function createOrder(\n    this: RESTBase,\n    requestParams: CreateOrderRequest\n): Promise<CreateOrderResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Cancel Orders\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_cancelorders\nexport function cancelOrders(\n    this: RESTBase,\n    requestParams: CancelOrdersRequest\n): Promise<CancelOrdersResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders/batch_cancel`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Edit Order\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_editorder\nexport function editOrder(\n    this: RESTBase,\n    requestParams: EditOrderRequest\n): Promise<EditOrderResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders/edit`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Edit Order Preview\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_previeweditorder\nexport function editOrderPreview(\n    this: RESTBase,\n    requestParams: EditOrderPreviewRequest\n): Promise<EditOrderPreviewResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders/edit_preview`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] List Orders\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_gethistoricalorders\nexport function listOrders(\n    this: RESTBase,\n    requestParams: ListOrdersRequest\n): Promise<ListOrdersResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/orders/historical/batch`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] List Fills\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfills\nexport function listFills(\n    this: RESTBase,\n    requestParams: ListFillsRequest\n): Promise<ListFillsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/orders/historical/fills`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Order\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_gethistoricalorder\nexport function getOrder(\n    this: RESTBase,\n    { orderId }: GetOrderRequest\n): Promise<GetOrderResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/orders/historical/${orderId}`,\n        isPublic: false,\n    });\n}\n\n// [POST] Preview Order\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_previeworder\nexport function previewOrder(\n    this: RESTBase,\n    requestParams: PreviewOrderRequest\n): Promise<PreviewOrderResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders/preview`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Close Position\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_closeposition\nexport function closePosition(\n    this: RESTBase,\n    requestParams: ClosePositionRequest\n): Promise<ClosePositionResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/orders/close_position`,\n        queryParams: undefined,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    GetPaymentMethodRequest,\n    GetPaymentMethodResponse,\n    ListPaymentMethodsResponse,\n} from './types/payments-types';\nimport { method } from './types/request-types';\n\n// [GET] List Payment Methods\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpaymentmethods\nexport function listPaymentMethods(\n    this: RESTBase\n): Promise<ListPaymentMethodsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/payment_methods`,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Payment Method\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpaymentmethod\nexport function getPaymentMethod(\n    this: RESTBase,\n    { paymentMethodId }: GetPaymentMethodRequest\n): Promise<GetPaymentMethodResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/payment_methods/${paymentMethodId}`,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    AllocatePortfolioRequest,\n    AllocatePortfolioResponse,\n    GetPerpetualsPortfolioSummaryRequest,\n    GetPerpetualsPortfolioSummaryResponse,\n    GetPerpetualsPositionRequest,\n    GetPerpetualsPositionResponse,\n    GetPortfolioBalancesRequest,\n    GetPortfolioBalancesResponse,\n    ListPerpetualsPositionsRequest,\n    ListPerpetualsPositionsResponse,\n    OptInOutMultiAssetCollateralRequest,\n    OptInOutMultiAssetCollateralResponse,\n} from './types/perpetuals-types';\nimport { method } from './types/request-types';\n\n// [POST] Allocate Portfolio\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_allocateportfolio\nexport function allocatePortfolio(\n    this: RESTBase,\n    requestParams: AllocatePortfolioRequest\n): Promise<AllocatePortfolioResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/intx/allocate`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Perpetuals Portfolio Summary\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxportfoliosummary\nexport function getPerpetualsPortfolioSummary(\n    this: RESTBase,\n    { portfolioUuid }: GetPerpetualsPortfolioSummaryRequest\n): Promise<GetPerpetualsPortfolioSummaryResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/intx/portfolio/${portfolioUuid}`,\n        isPublic: false,\n    });\n}\n\n// [GET] List Perpetuals Positions\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxpositions\nexport function listPerpetualsPositions(\n    this: RESTBase,\n    { portfolioUuid }: ListPerpetualsPositionsRequest\n): Promise<ListPerpetualsPositionsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/intx/positions/${portfolioUuid}`,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Perpetuals Position\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxposition\nexport function getPerpertualsPosition(\n    this: RESTBase,\n    { portfolioUuid, symbol }: GetPerpetualsPositionRequest\n): Promise<GetPerpetualsPositionResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/intx/positions/${portfolioUuid}/${symbol}`,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Portfolio Balances\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxbalances\nexport function getPortfolioBalances(\n    this: RESTBase,\n    { portfolioUuid }: GetPortfolioBalancesRequest\n): Promise<GetPortfolioBalancesResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/intx/balances/${portfolioUuid}`,\n        isPublic: false,\n    });\n}\n\n// [POST] Opt In or Out of Multi Asset Collateral\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_intxmultiassetcollateral\nexport function optInOutMultiAssetCollateral(\n    this: RESTBase,\n    requestParams: OptInOutMultiAssetCollateralRequest\n): Promise<OptInOutMultiAssetCollateralResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/intx/multi_asset_collateral`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    CreatePortfolioRequest,\n    CreatePortfolioResponse,\n    DeletePortfolioRequest,\n    DeletePortfolioResponse,\n    EditPortfolioRequest,\n    EditPortfolioResponse,\n    GetPortfolioBreakdownRequest,\n    GetPortfolioBreakdownResponse,\n    ListPortfoliosRequest,\n    ListPortfoliosResponse,\n    MovePortfolioFundsRequest,\n    MovePortfolioFundsResponse,\n} from './types/portfolios-types';\nimport { method } from './types/request-types';\n\n// [GET] List Portfolios\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getportfolios\nexport function listPortfolios(\n    this: RESTBase,\n    requestParams: ListPortfoliosRequest\n): Promise<ListPortfoliosResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/portfolios`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Create Portfolio\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_createportfolio\nexport function createPortfolio(\n    this: RESTBase,\n    requestParams: CreatePortfolioRequest\n): Promise<CreatePortfolioResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/portfolios`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [POST] Move Portfolio Funds\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_moveportfoliofunds\nexport function movePortfolioFunds(\n    this: RESTBase,\n    requestParams: MovePortfolioFundsRequest\n): Promise<MovePortfolioFundsResponse> {\n    return this.request({\n        method: method.POST,\n        endpoint: `${API_PREFIX}/portfolios/move_funds`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Portfolio Breakdown\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getportfoliobreakdown\nexport function getPortfolioBreakdown(\n    this: RESTBase,\n    { portfolioUuid, ...requestParams }: GetPortfolioBreakdownRequest\n): Promise<GetPortfolioBreakdownResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [DELETE] Delete Portfolio\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_deleteportfolio\nexport function deletePortfolio(\n    this: RESTBase,\n    { portfolioUuid }: DeletePortfolioRequest\n): Promise<DeletePortfolioResponse> {\n    return this.request({\n        method: method.DELETE,\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\n        isPublic: false,\n    });\n}\n\n// [PUT] Edit Portfolio\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_editportfolio\nexport function editPortfolio(\n    this: RESTBase,\n    { portfolioUuid, ...requestParams }: EditPortfolioRequest\n): Promise<EditPortfolioResponse> {\n    return this.request({\n        method: method.PUT,\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\n        bodyParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    GetBestBidAskRequest,\n    GetBestBidAskResponse,\n    GetMarketTradesRequest,\n    GetMarketTradesResponse,\n    GetProductBookRequest,\n    GetProductBookResponse,\n    GetProductCandlesRequest,\n    GetProductCandlesResponse,\n    GetProductRequest,\n    GetProductResponse,\n    ListProductsRequest,\n    ListProductsResponse,\n} from './types/products-types';\nimport { method } from './types/request-types';\n\n// [GET] Get Best Bid Ask\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getbestbidask\nexport function getBestBidAsk(\n    this: RESTBase,\n    requestParams: GetBestBidAskRequest\n): Promise<GetBestBidAskResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/best_bid_ask`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Product Book\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproductbook\nexport function getProductBook(\n    this: RESTBase,\n    requestParams: GetProductBookRequest\n): Promise<GetProductBookResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/product_book`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] List Products\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproducts\nexport function listProducts(\n    this: RESTBase,\n    requestParams: ListProductsRequest\n): Promise<ListProductsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/products`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Product\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproduct\nexport function getProduct(\n    this: RESTBase,\n    { productId, ...requestParams }: GetProductRequest\n): Promise<GetProductResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/products/${productId}`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Product Candles\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getcandles\nexport function getProductCandles(\n    this: RESTBase,\n    { productId, ...requestParams }: GetProductCandlesRequest\n): Promise<GetProductCandlesResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/products/${productId}/candles`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n\n// [GET] Get Market Trades\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getmarkettrades\nexport function getMarketTrades(\n    this: RESTBase,\n    { productId, ...requestParams }: GetMarketTradesRequest\n): Promise<GetMarketTradesResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/products/${productId}/ticker`,\n        queryParams: requestParams,\n        isPublic: false,\n    });\n}\n","import { API_PREFIX } from '../constants';\nimport type { RESTBase } from './rest-base';\nimport type {\n    GetPublicMarketTradesRequest,\n    GetPublicMarketTradesResponse,\n    GetPublicProductBookRequest,\n    GetPublicProductBookResponse,\n    GetPublicProductCandlesRequest,\n    GetPublicProductCandlesResponse,\n    GetPublicProductRequest,\n    GetPublicProductResponse,\n    GetServerTimeResponse,\n    ListPublicProductsRequest,\n    ListPublicProductsResponse,\n} from './types/public-types';\nimport { method } from './types/request-types';\n\n// [GET] Get Server Time\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getservertime\nexport function getServerTime(this: RESTBase): Promise<GetServerTimeResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/time`,\n        isPublic: true,\n    });\n}\n\n// [GET] Get Public Product Book\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproductbook\nexport function getPublicProductBook(\n    this: RESTBase,\n    requestParams: GetPublicProductBookRequest\n): Promise<GetPublicProductBookResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/market/product_book`,\n        queryParams: requestParams,\n        isPublic: true,\n    });\n}\n\n// [GET] List Public Products\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproducts\nexport function listPublicProducts(\n    this: RESTBase,\n    requestParams: ListPublicProductsRequest\n): Promise<ListPublicProductsResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/market/products`,\n        queryParams: requestParams,\n        isPublic: true,\n    });\n}\n\n// [GET] Get Public Product\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproduct\nexport function getPublicProduct(\n    this: RESTBase,\n    { productId }: GetPublicProductRequest\n): Promise<GetPublicProductResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/market/products/${productId}`,\n        isPublic: true,\n    });\n}\n\n// [GET] Get Public Product Candles\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpubliccandles\nexport function getPublicProductCandles(\n    this: RESTBase,\n    { productId, ...requestParams }: GetPublicProductCandlesRequest\n): Promise<GetPublicProductCandlesResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/market/products/${productId}/candles`,\n        queryParams: requestParams,\n        isPublic: true,\n    });\n}\n\n// [GET] Get Public Market Trades\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicmarkettrades\nexport function getPublicMarketTrades(\n    this: RESTBase,\n    { productId, ...requestParams }: GetPublicMarketTradesRequest\n): Promise<GetPublicMarketTradesResponse> {\n    return this.request({\n        method: method.GET,\n        endpoint: `${API_PREFIX}/products/${productId}/ticker`,\n        queryParams: requestParams,\n        isPublic: true,\n    });\n}\n","import { RESTBase } from './rest-base';\nimport * as Accounts from './accounts';\nimport * as Converts from './converts';\nimport * as DataAPI from './dataAPI';\nimport * as Fees from './fees';\nimport * as Futures from './futures';\nimport * as Orders from './orders';\nimport * as Payments from './payments';\nimport * as Perpetuals from './perpetuals';\nimport * as Portfolios from './portfolios';\nimport * as Products from './products';\nimport * as Public from './public';\n\nexport class RESTClient extends RESTBase {\n    constructor(key?: string | undefined, secret?: string | undefined) {\n        super(key, secret);\n    }\n\n    // =============== ACCOUNTS endpoints ===============\n    public getAccount = Accounts.getAccount.bind(this);\n    public listAccounts = Accounts.listAccounts.bind(this);\n\n    // =============== CONVERTS endpoints ===============\n    public createConvertQuote = Converts.createConvertQuote.bind(this);\n    public commitConvertTrade = Converts.commitConvertTrade.bind(this);\n    public getConvertTrade = Converts.getConvertTrade.bind(this);\n\n    // =============== DATA API endpoints ===============\n    public getAPIKeyPermissions = DataAPI.getAPIKeyPermissions.bind(this);\n\n    // =============== FEES endpoints ===============\n    public getTransactionSummary = Fees.getTransactionSummary.bind(this);\n\n    // =============== FUTURES endpoints ===============\n    public getFuturesBalanceSummary =\n        Futures.getFuturesBalanceSummary.bind(this);\n    public getIntradayMarginSetting =\n        Futures.getIntradayMarginSetting.bind(this);\n    public setIntradayMarginSetting =\n        Futures.setIntradayMarginSetting.bind(this);\n    public getCurrentMarginWindow = Futures.getCurrentMarginWindow.bind(this);\n    public listFuturesPositions = Futures.listFuturesPositions.bind(this);\n    public getFuturesPosition = Futures.getFuturesPosition.bind(this);\n    public scheduleFuturesSweep = Futures.scheduleFuturesSweep.bind(this);\n    public listFuturesSweeps = Futures.listFuturesSweeps.bind(this);\n    public cancelPendingFuturesSweep =\n        Futures.cancelPendingFuturesSweep.bind(this);\n\n    // =============== ORDERS endpoints ===============\n    public createOrder = Orders.createOrder.bind(this);\n    public cancelOrders = Orders.cancelOrders.bind(this);\n    public editOrder = Orders.editOrder.bind(this);\n    public editOrderPreview = Orders.editOrderPreview.bind(this);\n    public listOrders = Orders.listOrders.bind(this);\n    public listFills = Orders.listFills.bind(this);\n    public getOrder = Orders.getOrder.bind(this);\n    public previewOrder = Orders.previewOrder.bind(this);\n    public closePosition = Orders.closePosition.bind(this);\n\n    // =============== PAYMENTS endpoints ===============\n    public listPaymentMethods = Payments.listPaymentMethods.bind(this);\n    public getPaymentMethod = Payments.getPaymentMethod.bind(this);\n\n    // =============== PERPETUALS endpoints ===============\n    public allocatePortfolio = Perpetuals.allocatePortfolio.bind(this);\n    public getPerpetualsPortfolioSummary =\n        Perpetuals.getPerpetualsPortfolioSummary.bind(this);\n    public listPerpetualsPositions =\n        Perpetuals.listPerpetualsPositions.bind(this);\n    public getPerpetualsPosition = Perpetuals.getPerpertualsPosition.bind(this);\n    public getPortfolioBalances = Perpetuals.getPortfolioBalances.bind(this);\n    public optInOutMultiAssetCollateral =\n        Perpetuals.optInOutMultiAssetCollateral.bind(this);\n\n    // =============== PORTFOLIOS endpoints ===============\n    public listPortfolios = Portfolios.listPortfolios.bind(this);\n    public createPortfolio = Portfolios.createPortfolio.bind(this);\n    public deletePortfolio = Portfolios.deletePortfolio.bind(this);\n    public editPortfolio = Portfolios.editPortfolio.bind(this);\n    public movePortfolioFunds = Portfolios.movePortfolioFunds.bind(this);\n    public getPortfolioBreakdown = Portfolios.getPortfolioBreakdown.bind(this);\n\n    // =============== PRODUCTS endpoints ===============\n    public getBestBidAsk = Products.getBestBidAsk.bind(this);\n    public getProductBook = Products.getProductBook.bind(this);\n    public listProducts = Products.listProducts.bind(this);\n    public getProduct = Products.getProduct.bind(this);\n    public getProductCandles = Products.getProductCandles.bind(this);\n    public getMarketTrades = Products.getMarketTrades.bind(this);\n\n    // =============== PUBLIC endpoints ===============\n    public getServerTime = Public.getServerTime.bind(this);\n    public getPublicProductBook = Public.getPublicProductBook.bind(this);\n    public listPublicProducts = Public.listPublicProducts.bind(this);\n    public getPublicProduct = Public.getPublicProduct.bind(this);\n    public getPublicProductCandles = Public.getPublicProductCandles.bind(this);\n    public getPublicMarketTrades = Public.getPublicMarketTrades.bind(this);\n}\n","import { RESTClient } from \"../../advanced-sdk-ts/src/rest\";\nimport {\n    type Action,\n    type Plugin,\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    composeContext,\n    generateObject,\n    ModelClass,\n    type Provider,\n} from \"@elizaos/core\";\nimport { advancedTradeTemplate } from \"../templates\";\nimport { isAdvancedTradeContent, AdvancedTradeSchema } from \"../types\";\nimport { readFile } from \"fs/promises\";\nimport { parse } from \"csv-parse/sync\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport fs from \"fs\";\nimport { createArrayCsvWriter } from \"csv-writer\";\nimport {\n    OrderSide,\n    type OrderConfiguration,\n} from \"../../advanced-sdk-ts/src/rest/types/common-types\";\nimport type { CreateOrderResponse } from \"../../advanced-sdk-ts/src/rest/types/orders-types\";\n\n// File path setup remains the same\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\nconst tradeCsvFilePath = path.join(baseDir, \"advanced_trades.csv\");\n\nconst tradeProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Starting tradeProvider function\");\n        try {\n            const client = new RESTClient(\n                runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY\n            );\n\n            // Get accounts and products information\n            let accounts, products;\n            try {\n                accounts = await client.listAccounts({});\n            } catch (error) {\n                elizaLogger.error(\"Error fetching accounts:\", error);\n                return [];\n            }\n\n            try {\n                products = await client.listProducts({});\n            } catch (error) {\n                elizaLogger.error(\"Error fetching products:\", error);\n                return [];\n            }\n\n            // Read CSV file logic remains the same\n            if (!fs.existsSync(tradeCsvFilePath)) {\n                const csvWriter = createArrayCsvWriter({\n                    path: tradeCsvFilePath,\n                    header: [\n                        \"Order ID\",\n                        \"Success\",\n                        \"Order Configuration\",\n                        \"Response\",\n                    ],\n                });\n                await csvWriter.writeRecords([]);\n            }\n\n            let csvData, records;\n            try {\n                csvData = await readFile(tradeCsvFilePath, \"utf-8\");\n            } catch (error) {\n                elizaLogger.error(\"Error reading CSV file:\", error);\n                return [];\n            }\n\n            try {\n                records = parse(csvData, {\n                    columns: true,\n                    skip_empty_lines: true,\n                });\n            } catch (error) {\n                elizaLogger.error(\"Error parsing CSV data:\", error);\n                return [];\n            }\n\n            return {\n                accounts: accounts.accounts,\n                products: products.products,\n                trades: records,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in tradeProvider:\", error);\n            return [];\n        }\n    },\n};\n\nexport async function appendTradeToCsv(tradeResult: any) {\n    elizaLogger.debug(\"Starting appendTradeToCsv function\");\n    try {\n        const csvWriter = createArrayCsvWriter({\n            path: tradeCsvFilePath,\n            header: [\"Order ID\", \"Success\", \"Order Configuration\", \"Response\"],\n            append: true,\n        });\n        elizaLogger.info(\"Trade result:\", tradeResult);\n\n        // Format trade data based on success/failure\n        const formattedTrade = [\n            tradeResult.success_response?.order_id ||\n                tradeResult.failure_response?.order_id ||\n                \"\",\n            tradeResult.success,\n            // JSON.stringify(tradeResult.order_configuration || {}),\n            // JSON.stringify(tradeResult.success_response || tradeResult.failure_response || {})\n        ];\n\n        elizaLogger.info(\"Formatted trade for CSV:\", formattedTrade);\n        await csvWriter.writeRecords([formattedTrade]);\n        elizaLogger.info(\"Trade written to CSV successfully\");\n    } catch (error) {\n        elizaLogger.error(\"Error writing trade to CSV:\", error);\n        // Log the actual error for debugging\n        if (error instanceof Error) {\n            elizaLogger.error(\"Error details:\", error.message);\n        }\n    }\n}\n\nasync function hasEnoughBalance(\n    client: RESTClient,\n    currency: string,\n    amount: number,\n    side: string\n): Promise<boolean> {\n    elizaLogger.debug(\"Starting hasEnoughBalance function\");\n    try {\n        const response = await client.listAccounts({});\n        const accounts = JSON.parse(response);\n        elizaLogger.info(\"Accounts:\", accounts);\n        const checkCurrency = side === \"BUY\" ? \"USD\" : currency;\n        elizaLogger.info(\n            `Checking balance for ${side} order of ${amount} ${checkCurrency}`\n        );\n\n        // Find account with exact currency match\n        const account = accounts?.accounts.find(\n            (acc) =>\n                acc.currency === checkCurrency &&\n                (checkCurrency === \"USD\"\n                    ? acc.type === \"ACCOUNT_TYPE_FIAT\"\n                    : acc.type === \"ACCOUNT_TYPE_CRYPTO\")\n        );\n\n        if (!account) {\n            elizaLogger.error(`No ${checkCurrency} account found`);\n            return false;\n        }\n\n        const available = Number.parseFloat(account.available_balance.value);\n        // Add buffer for fees only on USD purchases\n        const requiredAmount = side === \"BUY\" ? amount * 1.01 : amount;\n        elizaLogger.info(\n            `Required amount (including buffer): ${requiredAmount} ${checkCurrency}`\n        );\n\n        const hasBalance = available >= requiredAmount;\n        elizaLogger.info(`Has sufficient balance: ${hasBalance}`);\n\n        return hasBalance;\n    } catch (error) {\n        elizaLogger.error(\"Balance check failed with error:\", {\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            currency,\n            amount,\n            side,\n        });\n        return false;\n    }\n}\n\nexport const executeAdvancedTradeAction: Action = {\n    name: \"EXECUTE_ADVANCED_TRADE\",\n    description: \"Execute a trade using Coinbase Advanced Trading API\",\n    validate: async (runtime: IAgentRuntime) => {\n        return (\n            !!(\n                runtime.getSetting(\"COINBASE_API_KEY\") ||\n                process.env.COINBASE_API_KEY\n            ) &&\n            !!(\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ||\n                process.env.COINBASE_PRIVATE_KEY\n            )\n        );\n    },\n    similes: [\n        \"EXECUTE_ADVANCED_TRADE\",\n        \"ADVANCED_MARKET_ORDER\",\n        \"ADVANCED_LIMIT_ORDER\",\n        \"COINBASE_PRO_TRADE\",\n        \"PROFESSIONAL_TRADE\",\n    ],\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        let client: RESTClient;\n\n        // Initialize client\n        elizaLogger.debug(\"Starting advanced trade client initialization\");\n        try {\n            client = new RESTClient(\n                runtime.getSetting(\"COINBASE_API_KEY\") ??\n                    process.env.COINBASE_API_KEY,\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\n                    process.env.COINBASE_PRIVATE_KEY\n            );\n            elizaLogger.info(\"Advanced trade client initialized\");\n        } catch (error) {\n            elizaLogger.error(\"Client initialization failed:\", error);\n            callback(\n                {\n                    text: \"Failed to initialize trading client. Please check your API credentials.\",\n                },\n                []\n            );\n            return;\n        }\n\n        // Generate trade details\n        let tradeDetails;\n        elizaLogger.debug(\"Starting trade details generation\");\n        try {\n            tradeDetails = await generateObject({\n                runtime,\n                context: composeContext({\n                    state,\n                    template: advancedTradeTemplate,\n                }),\n                modelClass: ModelClass.LARGE,\n                schema: AdvancedTradeSchema,\n            });\n            elizaLogger.info(\"Trade details generated:\", tradeDetails.object);\n        } catch (error) {\n            elizaLogger.error(\"Trade details generation failed:\", error);\n            callback(\n                {\n                    text: \"Failed to generate trade details. Please provide valid trading parameters.\",\n                },\n                []\n            );\n            return;\n        }\n\n        // Validate trade content\n        if (!isAdvancedTradeContent(tradeDetails.object)) {\n            elizaLogger.error(\"Invalid trade content:\", tradeDetails.object);\n            callback(\n                {\n                    text: \"Invalid trade details. Please check your input parameters.\",\n                },\n                []\n            );\n            return;\n        }\n\n        const { productId, amount, side, orderType, limitPrice } =\n            tradeDetails.object;\n\n        // Configure order\n        let orderConfiguration: OrderConfiguration;\n        elizaLogger.debug(\"Starting order configuration\");\n        try {\n            if (orderType === \"MARKET\") {\n                orderConfiguration =\n                    side === \"BUY\"\n                        ? {\n                              market_market_ioc: {\n                                  quote_size: amount.toString(),\n                              },\n                          }\n                        : {\n                              market_market_ioc: {\n                                  base_size: amount.toString(),\n                              },\n                          };\n            } else {\n                if (!limitPrice) {\n                    throw new Error(\"Limit price is required for limit orders\");\n                }\n                orderConfiguration = {\n                    limit_limit_gtc: {\n                        baseSize: amount.toString(),\n                        limitPrice: limitPrice.toString(),\n                        postOnly: false,\n                    },\n                };\n            }\n            elizaLogger.info(\n                \"Order configuration created:\",\n                orderConfiguration\n            );\n        } catch (error) {\n            elizaLogger.error(\"Order configuration failed:\", error);\n            callback(\n                {\n                    text:\n                        error instanceof Error\n                            ? error.message\n                            : \"Failed to configure order parameters.\",\n                },\n                []\n            );\n            return;\n        }\n\n        // Execute trade\n        let order: CreateOrderResponse;\n        try {\n            elizaLogger.debug(\"Executing the trade\");\n            if (\n                !(await hasEnoughBalance(\n                    client,\n                    productId.split(\"-\")[0],\n                    amount,\n                    side\n                ))\n            ) {\n                callback(\n                    {\n                        text: `Insufficient ${side === \"BUY\" ? \"USD\" : productId.split(\"-\")[0]} balance to execute this trade`,\n                    },\n                    []\n                );\n                return;\n            }\n\n            order = await client.createOrder({\n                clientOrderId: crypto.randomUUID(),\n                productId,\n                side: side === \"BUY\" ? OrderSide.BUY : OrderSide.SELL,\n                orderConfiguration,\n            });\n\n            elizaLogger.info(\"Trade executed successfully:\", order);\n        } catch (error) {\n            elizaLogger.error(\"Trade execution failed:\", error?.message);\n            callback(\n                {\n                    text: `Failed to execute trade: ${error instanceof Error ? error.message : \"Unknown error occurred\"}`,\n                },\n                []\n            );\n            return;\n        }\n        // Log trade to CSV\n        try {\n            // await appendTradeToCsv(order);\n            elizaLogger.info(\"Trade logged to CSV\");\n        } catch (csvError) {\n            elizaLogger.warn(\"Failed to log trade to CSV:\", csvError);\n            // Continue execution as this is non-critical\n        }\n\n        callback(\n            {\n                text: `Advanced Trade executed successfully:\n- Product: ${productId}\n- Type: ${orderType} Order\n- Side: ${side}\n- Amount: ${amount}\n- ${orderType === \"LIMIT\" ? `- Limit Price: ${limitPrice}\\n` : \"\"}- Order ID: ${order.order_id}\n- Status: ${order.success}\n- Order Id:  ${order.order_id}\n- Response: ${JSON.stringify(order.response)}\n- Order Configuration: ${JSON.stringify(order.order_configuration)}`,\n            },\n            []\n        );\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Place an advanced market order to buy $1 worth of BTC\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Advanced Trade executed successfully:\n- Product: BTC-USD\n- Type: Market Order\n- Side: BUY\n- Amount: 1000\n- Order ID: CB-ADV-12345\n- Success: true\n- Response: {\"success_response\":{}}\n- Order Configuration: {\"market_market_ioc\":{\"quote_size\":\"1000\"}}`,\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Set a limit order to sell 0.5 ETH at $2000\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: `Advanced Trade executed successfully:\n- Product: ETH-USD\n- Type: Limit Order\n- Side: SELL\n- Amount: 0.5\n- Limit Price: 2000\n- Order ID: CB-ADV-67890\n- Success: true\n- Response: {\"success_response\":{}}\n- Order Configuration: {\"limit_limit_gtc\":{\"baseSize\":\"0.5\",\"limitPrice\":\"2000\",\"postOnly\":false}}`,\n                },\n            },\n        ],\n    ],\n};\n\nexport const advancedTradePlugin: Plugin = {\n    name: \"advancedTradePlugin\",\n    description: \"Enables advanced trading using Coinbase Advanced Trading API\",\n    actions: [executeAdvancedTradeAction],\n    providers: [tradeProvider],\n};\n","import { coinbaseMassPaymentsPlugin } from \"./plugins/massPayments\";\nimport { coinbaseCommercePlugin } from \"./plugins/commerce\";\nimport { tradePlugin } from \"./plugins/trade\";\nimport { tokenContractPlugin } from \"./plugins/tokenContract\";\nimport { webhookPlugin } from \"./plugins/webhooks\";\nimport { advancedTradePlugin } from \"./plugins/advancedTrade\";\n\nexport const plugins = {\n  coinbaseMassPaymentsPlugin,\n  coinbaseCommercePlugin,\n  tradePlugin,\n  tokenContractPlugin,\n  webhookPlugin,\n  advancedTradePlugin,\n};\n\nexport const mergedPlugins = {\n  name: \"coinbase\",\n  description: \"Coinbase plugin. Enables various functionalities using the Coinbase SDK.\",\n  actions: Object.values(plugins)\n    .map((plugin) => plugin.actions)\n    .filter(Boolean)\n    .flat(),\n  providers: Object.values(plugins)\n    .map((plugin) => plugin.providers)\n    .filter(Boolean)\n    .flat(),\n  evaluators: Object.values(plugins)\n    .map((plugin) => plugin.evaluators)\n    .filter(Boolean)\n    .flat(),\n  services: Object.values(plugins)\n    .map((plugin) => plugin.services)\n    .filter(Boolean)\n    .flat(),\n};\n\nconsole.log(mergedPlugins)\n\nexport default mergedPlugins;"],"mappings":"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","names":["Coinbase","elizaLogger","path","fileURLToPath","fs","createArrayCsvWriter","Coinbase","networkId","csvWriter","__filename","fileURLToPath","__dirname","path","baseDir","elizaLogger","Coinbase","fs","createArrayCsvWriter","composeContext","elizaLogger","generateObject","ModelClass","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","chargeDetails","balances","transactions","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","readFile","parse","path","fileURLToPath","fs","createArrayCsvWriter","__filename","__dirname","baseDir","tradeCsvFilePath","elizaLogger","Coinbase","composeContext","generateObject","ModelClass","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","path","fileURLToPath","createArrayCsvWriter","fs","__filename","fileURLToPath","__dirname","path","baseDir","elizaLogger","Coinbase","fs","csvWriter","createArrayCsvWriter","composeContext","generateObject","ModelClass","method","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","Coinbase","composeContext","generateObject","ModelClass","crypto","fetch","method","url","fetch","elizaLogger","composeContext","generateObject","ModelClass","readFile","parse","path","fileURLToPath","fs","createArrayCsvWriter","__filename","fileURLToPath","__dirname","path","baseDir","tradeCsvFilePath","tradeProvider","elizaLogger","fs","createArrayCsvWriter","readFile","parse","elizaLogger","generateObject","composeContext","ModelClass","tradeProvider"]}